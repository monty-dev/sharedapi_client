# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from sharedapi_client.models.search_result import SearchResult  # noqa: E501

class TestSearchResult(unittest.TestCase):
    """SearchResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResult:
        """Test SearchResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResult`
        """
        model = SearchResult()  # noqa: E501
        if include_optional:
            return SearchResult(
                id = None,
                title = None,
                formats = None,
                thumbnails = None,
                thumbnail = None,
                description = None,
                uploader = None,
                uploader_id = None,
                uploader_url = None,
                channel_id = None,
                channel_url = None,
                duration = None,
                view_count = None,
                average_rating = None,
                age_limit = None,
                webpage_url = None,
                categories = None,
                tags = None,
                playable_in_embed = None,
                is_live = None,
                was_live = None,
                live_status = None,
                release_timestamp = None,
                automatic_captions = {
                    'key' : null
                    },
                subtitles = sharedapi_client.models.subtitles.Subtitles(
                    live_chat = null, ),
                comment_count = None,
                chapters = None,
                like_count = None,
                channel = None,
                channel_follower_count = None,
                upload_date = None,
                availability = None,
                original_url = None,
                webpage_url_basename = None,
                webpage_url_domain = None,
                extractor = None,
                extractor_key = None,
                playlist_count = None,
                playlist = None,
                playlist_id = None,
                playlist_title = None,
                playlist_uploader = None,
                playlist_uploader_id = None,
                n_entries = None,
                playlist_index = None,
                playlist_autonumber = None,
                display_id = None,
                fulltitle = None,
                duration_string = None,
                release_date = None,
                requested_subtitles = None,
                asr = None,
                filesize = None,
                format_id = None,
                format_note = None,
                source_preference = None,
                fps = None,
                audio_channels = None,
                height = None,
                quality = None,
                has_drm = None,
                tbr = None,
                url = None,
                width = None,
                language = None,
                language_preference = None,
                ext = None,
                vcodec = None,
                acodec = None,
                abr = None,
                downloader_options = sharedapi_client.models.downloader_options1.DownloaderOptions1(
                    http_chunk_size = null, ),
                container = None,
                protocol = None,
                audio_ext = None,
                video_ext = None,
                format = None,
                resolution = None,
                http_headers = sharedapi_client.models.http_headers1.HttpHeaders1(
                    user_agent = null, 
                    accept = null, 
                    accept_language = null, 
                    sec_fetch_mode = null, )
            )
        else:
            return SearchResult(
        )
        """

    def testSearchResult(self):
        """Test SearchResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

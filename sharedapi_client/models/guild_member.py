# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.user1 import User1

class GuildMember(BaseModel):
    """
    GuildMember
    """
    flags: Optional[Any] = None
    is_pending: Optional[Any] = None
    joined_at: Optional[Any] = None
    nick: Optional[Any] = None
    pending: Optional[Any] = None
    premium_since: Optional[Any] = None
    roles: Optional[Any] = None
    user: Optional[User1] = None
    bio: Optional[Any] = None
    banner: Optional[Any] = None
    mute: Optional[Any] = None
    deaf: Optional[Any] = None
    __properties = ["flags", "is_pending", "joined_at", "nick", "pending", "premium_since", "roles", "user", "bio", "banner", "mute", "deaf"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GuildMember:
        """Create an instance of GuildMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if flags (nullable) is None
        # and __fields_set__ contains the field
        if self.flags is None and "flags" in self.__fields_set__:
            _dict['flags'] = None

        # set to None if is_pending (nullable) is None
        # and __fields_set__ contains the field
        if self.is_pending is None and "is_pending" in self.__fields_set__:
            _dict['is_pending'] = None

        # set to None if joined_at (nullable) is None
        # and __fields_set__ contains the field
        if self.joined_at is None and "joined_at" in self.__fields_set__:
            _dict['joined_at'] = None

        # set to None if nick (nullable) is None
        # and __fields_set__ contains the field
        if self.nick is None and "nick" in self.__fields_set__:
            _dict['nick'] = None

        # set to None if pending (nullable) is None
        # and __fields_set__ contains the field
        if self.pending is None and "pending" in self.__fields_set__:
            _dict['pending'] = None

        # set to None if premium_since (nullable) is None
        # and __fields_set__ contains the field
        if self.premium_since is None and "premium_since" in self.__fields_set__:
            _dict['premium_since'] = None

        # set to None if roles (nullable) is None
        # and __fields_set__ contains the field
        if self.roles is None and "roles" in self.__fields_set__:
            _dict['roles'] = None

        # set to None if bio (nullable) is None
        # and __fields_set__ contains the field
        if self.bio is None and "bio" in self.__fields_set__:
            _dict['bio'] = None

        # set to None if banner (nullable) is None
        # and __fields_set__ contains the field
        if self.banner is None and "banner" in self.__fields_set__:
            _dict['banner'] = None

        # set to None if mute (nullable) is None
        # and __fields_set__ contains the field
        if self.mute is None and "mute" in self.__fields_set__:
            _dict['mute'] = None

        # set to None if deaf (nullable) is None
        # and __fields_set__ contains the field
        if self.deaf is None and "deaf" in self.__fields_set__:
            _dict['deaf'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GuildMember:
        """Create an instance of GuildMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GuildMember.parse_obj(obj)

        _obj = GuildMember.parse_obj({
            "flags": obj.get("flags"),
            "is_pending": obj.get("is_pending"),
            "joined_at": obj.get("joined_at"),
            "nick": obj.get("nick"),
            "pending": obj.get("pending"),
            "premium_since": obj.get("premium_since"),
            "roles": obj.get("roles"),
            "user": User1.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "bio": obj.get("bio"),
            "banner": obj.get("banner"),
            "mute": obj.get("mute"),
            "deaf": obj.get("deaf")
        })
        return _obj



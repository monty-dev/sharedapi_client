# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel, Field


class ImageEvaluationResult(BaseModel):
    """ImageEvaluationResult."""

    adult: Optional[Any] = Field(None, description="Indicates if an image is classified as adult.")
    racy: Optional[Any] = Field(None, description="Indicates if the image is classified as racy.")
    adult_classification_score: Optional[Any] = Field(None, description="Probability image is adult.")
    racy_classification_score: Optional[Any] = Field(None, description="Probability image is racy.")
    advanced_info: Optional[Any] = None
    __properties = ["adult", "racy", "adult_classification_score", "racy_classification_score", "advanced_info"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageEvaluationResult:
        """Create an instance of ImageEvaluationResult from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if adult (nullable) is None
        # and __fields_set__ contains the field
        if self.adult is None and "adult" in self.__fields_set__:
            _dict["adult"] = None

        # set to None if racy (nullable) is None
        # and __fields_set__ contains the field
        if self.racy is None and "racy" in self.__fields_set__:
            _dict["racy"] = None

        # set to None if adult_classification_score (nullable) is None
        # and __fields_set__ contains the field
        if self.adult_classification_score is None and "adult_classification_score" in self.__fields_set__:
            _dict["adult_classification_score"] = None

        # set to None if racy_classification_score (nullable) is None
        # and __fields_set__ contains the field
        if self.racy_classification_score is None and "racy_classification_score" in self.__fields_set__:
            _dict["racy_classification_score"] = None

        # set to None if advanced_info (nullable) is None
        # and __fields_set__ contains the field
        if self.advanced_info is None and "advanced_info" in self.__fields_set__:
            _dict["advanced_info"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageEvaluationResult:
        """Create an instance of ImageEvaluationResult from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageEvaluationResult.parse_obj(obj)

        return ImageEvaluationResult.parse_obj(
            {
                "adult": obj.get("adult"),
                "racy": obj.get("racy"),
                "adult_classification_score": obj.get("adult_classification_score"),
                "racy_classification_score": obj.get("racy_classification_score"),
                "advanced_info": obj.get("advanced_info"),
            },
        )

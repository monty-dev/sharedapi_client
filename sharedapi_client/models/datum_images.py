# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class DatumImages(BaseModel):
    """
    DatumImages
    """
    small: Optional[Any] = None
    large: Optional[Any] = None
    triangle_down: Optional[Any] = None
    triangle_up: Optional[Any] = None
    __properties = ["small", "large", "triangle_down", "triangle_up"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatumImages:
        """Create an instance of DatumImages from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if small (nullable) is None
        # and __fields_set__ contains the field
        if self.small is None and "small" in self.__fields_set__:
            _dict['small'] = None

        # set to None if large (nullable) is None
        # and __fields_set__ contains the field
        if self.large is None and "large" in self.__fields_set__:
            _dict['large'] = None

        # set to None if triangle_down (nullable) is None
        # and __fields_set__ contains the field
        if self.triangle_down is None and "triangle_down" in self.__fields_set__:
            _dict['triangle_down'] = None

        # set to None if triangle_up (nullable) is None
        # and __fields_set__ contains the field
        if self.triangle_up is None and "triangle_up" in self.__fields_set__:
            _dict['triangle_up'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatumImages:
        """Create an instance of DatumImages from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatumImages.parse_obj(obj)

        _obj = DatumImages.parse_obj({
            "small": obj.get("small"),
            "large": obj.get("large"),
            "triangle_down": obj.get("triangle_down"),
            "triangle_up": obj.get("triangle_up")
        })
        return _obj



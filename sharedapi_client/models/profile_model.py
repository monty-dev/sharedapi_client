# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.discord_user import DiscordUser
from sharedapi_client.models.guild_member import GuildMember
from sharedapi_client.models.guild_member_profile import GuildMemberProfile
from sharedapi_client.models.user_profile import UserProfile

class ProfileModel(BaseModel):
    """
    ProfileModel
    """
    user: Optional[DiscordUser] = None
    connected_accounts: Optional[Any] = None
    premium_since: Optional[Any] = None
    premium_type: Optional[Any] = None
    premium_guild_since: Optional[Any] = None
    profile_themes_experiment_bucket: Optional[Any] = None
    guild_member: Optional[GuildMember] = None
    user_profile: Optional[UserProfile] = None
    guild_member_profile: Optional[GuildMemberProfile] = None
    __properties = ["user", "connected_accounts", "premium_since", "premium_type", "premium_guild_since", "profile_themes_experiment_bucket", "guild_member", "user_profile", "guild_member_profile"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProfileModel:
        """Create an instance of ProfileModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guild_member
        if self.guild_member:
            _dict['guild_member'] = self.guild_member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_profile
        if self.user_profile:
            _dict['user_profile'] = self.user_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guild_member_profile
        if self.guild_member_profile:
            _dict['guild_member_profile'] = self.guild_member_profile.to_dict()
        # set to None if connected_accounts (nullable) is None
        # and __fields_set__ contains the field
        if self.connected_accounts is None and "connected_accounts" in self.__fields_set__:
            _dict['connected_accounts'] = None

        # set to None if premium_since (nullable) is None
        # and __fields_set__ contains the field
        if self.premium_since is None and "premium_since" in self.__fields_set__:
            _dict['premium_since'] = None

        # set to None if premium_type (nullable) is None
        # and __fields_set__ contains the field
        if self.premium_type is None and "premium_type" in self.__fields_set__:
            _dict['premium_type'] = None

        # set to None if premium_guild_since (nullable) is None
        # and __fields_set__ contains the field
        if self.premium_guild_since is None and "premium_guild_since" in self.__fields_set__:
            _dict['premium_guild_since'] = None

        # set to None if profile_themes_experiment_bucket (nullable) is None
        # and __fields_set__ contains the field
        if self.profile_themes_experiment_bucket is None and "profile_themes_experiment_bucket" in self.__fields_set__:
            _dict['profile_themes_experiment_bucket'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProfileModel:
        """Create an instance of ProfileModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProfileModel.parse_obj(obj)

        _obj = ProfileModel.parse_obj({
            "user": DiscordUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "connected_accounts": obj.get("connected_accounts"),
            "premium_since": obj.get("premium_since"),
            "premium_type": obj.get("premium_type"),
            "premium_guild_since": obj.get("premium_guild_since"),
            "profile_themes_experiment_bucket": obj.get("profile_themes_experiment_bucket"),
            "guild_member": GuildMember.from_dict(obj.get("guild_member")) if obj.get("guild_member") is not None else None,
            "user_profile": UserProfile.from_dict(obj.get("user_profile")) if obj.get("user_profile") is not None else None,
            "guild_member_profile": GuildMemberProfile.from_dict(obj.get("guild_member_profile")) if obj.get("guild_member_profile") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.datum_images import DatumImages

class CurrentData(BaseModel):
    """
    CurrentData
    """
    currenttier: Optional[Any] = None
    currenttierpatched: Optional[Any] = None
    images: Optional[DatumImages] = None
    ranking_in_tier: Optional[Any] = None
    mmr_change_to_last_game: Optional[Any] = None
    elo: Optional[Any] = None
    games_needed_for_rating: Optional[Any] = None
    old: Optional[Any] = None
    __properties = ["currenttier", "currenttierpatched", "images", "ranking_in_tier", "mmr_change_to_last_game", "elo", "games_needed_for_rating", "old"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CurrentData:
        """Create an instance of CurrentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # set to None if currenttier (nullable) is None
        # and __fields_set__ contains the field
        if self.currenttier is None and "currenttier" in self.__fields_set__:
            _dict['currenttier'] = None

        # set to None if currenttierpatched (nullable) is None
        # and __fields_set__ contains the field
        if self.currenttierpatched is None and "currenttierpatched" in self.__fields_set__:
            _dict['currenttierpatched'] = None

        # set to None if ranking_in_tier (nullable) is None
        # and __fields_set__ contains the field
        if self.ranking_in_tier is None and "ranking_in_tier" in self.__fields_set__:
            _dict['ranking_in_tier'] = None

        # set to None if mmr_change_to_last_game (nullable) is None
        # and __fields_set__ contains the field
        if self.mmr_change_to_last_game is None and "mmr_change_to_last_game" in self.__fields_set__:
            _dict['mmr_change_to_last_game'] = None

        # set to None if elo (nullable) is None
        # and __fields_set__ contains the field
        if self.elo is None and "elo" in self.__fields_set__:
            _dict['elo'] = None

        # set to None if games_needed_for_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.games_needed_for_rating is None and "games_needed_for_rating" in self.__fields_set__:
            _dict['games_needed_for_rating'] = None

        # set to None if old (nullable) is None
        # and __fields_set__ contains the field
        if self.old is None and "old" in self.__fields_set__:
            _dict['old'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CurrentData:
        """Create an instance of CurrentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CurrentData.parse_obj(obj)

        _obj = CurrentData.parse_obj({
            "currenttier": obj.get("currenttier"),
            "currenttierpatched": obj.get("currenttierpatched"),
            "images": DatumImages.from_dict(obj.get("images")) if obj.get("images") is not None else None,
            "ranking_in_tier": obj.get("ranking_in_tier"),
            "mmr_change_to_last_game": obj.get("mmr_change_to_last_game"),
            "elo": obj.get("elo"),
            "games_needed_for_rating": obj.get("games_needed_for_rating"),
            "old": obj.get("old")
        })
        return _obj



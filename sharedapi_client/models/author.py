# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class Author(BaseModel):
    """Author."""

    avatar_thumb: Optional[Any] = None
    unique_id: Optional[Any] = None
    __properties = ["avatar_thumb", "unique_id"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Author:
        """Create an instance of Author from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if avatar_thumb (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_thumb is None and "avatar_thumb" in self.__fields_set__:
            _dict["avatar_thumb"] = None

        # set to None if unique_id (nullable) is None
        # and __fields_set__ contains the field
        if self.unique_id is None and "unique_id" in self.__fields_set__:
            _dict["unique_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Author:
        """Create an instance of Author from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Author.parse_obj(obj)

        _obj = Author.parse_obj({"avatar_thumb": obj.get("avatar_thumb"), "unique_id": obj.get("unique_id")})
        return _obj

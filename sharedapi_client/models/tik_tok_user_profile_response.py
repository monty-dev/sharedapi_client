# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class TikTokUserProfileResponse(BaseModel):
    """TikTokUserProfileResponse."""

    avatar_url: Optional[Any] = None
    digg_count: Optional[Any] = None
    follower_count: Optional[Any] = None
    following_count: Optional[Any] = None
    heart: Optional[Any] = None
    unique_id: Optional[Any] = None
    id: Optional[Any] = None
    nickname: Optional[Any] = None
    private_account: Optional[Any] = None
    verified: Optional[Any] = None
    video_count: Optional[Any] = None
    signature: Optional[Any] = None
    __properties = [
        "avatar_url",
        "digg_count",
        "follower_count",
        "following_count",
        "heart",
        "unique_id",
        "id",
        "nickname",
        "private_account",
        "verified",
        "video_count",
        "signature",
    ]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TikTokUserProfileResponse:
        """Create an instance of TikTokUserProfileResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if avatar_url (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_url is None and "avatar_url" in self.__fields_set__:
            _dict["avatar_url"] = None

        # set to None if digg_count (nullable) is None
        # and __fields_set__ contains the field
        if self.digg_count is None and "digg_count" in self.__fields_set__:
            _dict["digg_count"] = None

        # set to None if follower_count (nullable) is None
        # and __fields_set__ contains the field
        if self.follower_count is None and "follower_count" in self.__fields_set__:
            _dict["follower_count"] = None

        # set to None if following_count (nullable) is None
        # and __fields_set__ contains the field
        if self.following_count is None and "following_count" in self.__fields_set__:
            _dict["following_count"] = None

        # set to None if heart (nullable) is None
        # and __fields_set__ contains the field
        if self.heart is None and "heart" in self.__fields_set__:
            _dict["heart"] = None

        # set to None if unique_id (nullable) is None
        # and __fields_set__ contains the field
        if self.unique_id is None and "unique_id" in self.__fields_set__:
            _dict["unique_id"] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if nickname (nullable) is None
        # and __fields_set__ contains the field
        if self.nickname is None and "nickname" in self.__fields_set__:
            _dict["nickname"] = None

        # set to None if private_account (nullable) is None
        # and __fields_set__ contains the field
        if self.private_account is None and "private_account" in self.__fields_set__:
            _dict["private_account"] = None

        # set to None if verified (nullable) is None
        # and __fields_set__ contains the field
        if self.verified is None and "verified" in self.__fields_set__:
            _dict["verified"] = None

        # set to None if video_count (nullable) is None
        # and __fields_set__ contains the field
        if self.video_count is None and "video_count" in self.__fields_set__:
            _dict["video_count"] = None

        # set to None if signature (nullable) is None
        # and __fields_set__ contains the field
        if self.signature is None and "signature" in self.__fields_set__:
            _dict["signature"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TikTokUserProfileResponse:
        """Create an instance of TikTokUserProfileResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TikTokUserProfileResponse.parse_obj(obj)

        return TikTokUserProfileResponse.parse_obj(
            {
                "avatar_url": obj.get("avatar_url"),
                "digg_count": obj.get("digg_count"),
                "follower_count": obj.get("follower_count"),
                "following_count": obj.get("following_count"),
                "heart": obj.get("heart"),
                "unique_id": obj.get("unique_id"),
                "id": obj.get("id"),
                "nickname": obj.get("nickname"),
                "private_account": obj.get("private_account"),
                "verified": obj.get("verified"),
                "video_count": obj.get("video_count"),
                "signature": obj.get("signature"),
            },
        )

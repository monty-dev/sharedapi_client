# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel

from sharedapi_client.models.card import Card


class ValorantProfileResponse(BaseModel):
    """ValorantProfileResponse."""

    name: Optional[Any] = None
    tag: Optional[Any] = None
    puuid: Optional[Any] = None
    current_rating: Optional[Any] = None
    peak_rating: Optional[Any] = None
    peak_rating_act: Optional[Any] = None
    avatar_url: Optional[Any] = None
    card: Optional[Card] = None
    account_level: Optional[Any] = None
    kd_ratio: Optional[Any] = None
    damage_round_ratio: Optional[Any] = None
    headshot_percent: Optional[Any] = None
    win_percent: Optional[Any] = None
    wins: Optional[Any] = None
    lost: Optional[Any] = None
    matches_played: Optional[Any] = None
    region: Optional[Any] = None
    kills: Optional[Any] = None
    deaths: Optional[Any] = None
    last_update: Optional[Any] = None
    __properties = [
        "name",
        "tag",
        "puuid",
        "current_rating",
        "peak_rating",
        "peak_rating_act",
        "avatar_url",
        "card",
        "account_level",
        "kd_ratio",
        "damage_round_ratio",
        "headshot_percent",
        "win_percent",
        "wins",
        "lost",
        "matches_played",
        "region",
        "kills",
        "deaths",
        "last_update",
    ]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValorantProfileResponse:
        """Create an instance of ValorantProfileResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict["card"] = self.card.to_dict()
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict["tag"] = None

        # set to None if puuid (nullable) is None
        # and __fields_set__ contains the field
        if self.puuid is None and "puuid" in self.__fields_set__:
            _dict["puuid"] = None

        # set to None if current_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.current_rating is None and "current_rating" in self.__fields_set__:
            _dict["current_rating"] = None

        # set to None if peak_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.peak_rating is None and "peak_rating" in self.__fields_set__:
            _dict["peak_rating"] = None

        # set to None if peak_rating_act (nullable) is None
        # and __fields_set__ contains the field
        if self.peak_rating_act is None and "peak_rating_act" in self.__fields_set__:
            _dict["peak_rating_act"] = None

        # set to None if avatar_url (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_url is None and "avatar_url" in self.__fields_set__:
            _dict["avatar_url"] = None

        # set to None if account_level (nullable) is None
        # and __fields_set__ contains the field
        if self.account_level is None and "account_level" in self.__fields_set__:
            _dict["account_level"] = None

        # set to None if kd_ratio (nullable) is None
        # and __fields_set__ contains the field
        if self.kd_ratio is None and "kd_ratio" in self.__fields_set__:
            _dict["kd_ratio"] = None

        # set to None if damage_round_ratio (nullable) is None
        # and __fields_set__ contains the field
        if self.damage_round_ratio is None and "damage_round_ratio" in self.__fields_set__:
            _dict["damage_round_ratio"] = None

        # set to None if headshot_percent (nullable) is None
        # and __fields_set__ contains the field
        if self.headshot_percent is None and "headshot_percent" in self.__fields_set__:
            _dict["headshot_percent"] = None

        # set to None if win_percent (nullable) is None
        # and __fields_set__ contains the field
        if self.win_percent is None and "win_percent" in self.__fields_set__:
            _dict["win_percent"] = None

        # set to None if wins (nullable) is None
        # and __fields_set__ contains the field
        if self.wins is None and "wins" in self.__fields_set__:
            _dict["wins"] = None

        # set to None if lost (nullable) is None
        # and __fields_set__ contains the field
        if self.lost is None and "lost" in self.__fields_set__:
            _dict["lost"] = None

        # set to None if matches_played (nullable) is None
        # and __fields_set__ contains the field
        if self.matches_played is None and "matches_played" in self.__fields_set__:
            _dict["matches_played"] = None

        # set to None if region (nullable) is None
        # and __fields_set__ contains the field
        if self.region is None and "region" in self.__fields_set__:
            _dict["region"] = None

        # set to None if kills (nullable) is None
        # and __fields_set__ contains the field
        if self.kills is None and "kills" in self.__fields_set__:
            _dict["kills"] = None

        # set to None if deaths (nullable) is None
        # and __fields_set__ contains the field
        if self.deaths is None and "deaths" in self.__fields_set__:
            _dict["deaths"] = None

        # set to None if last_update (nullable) is None
        # and __fields_set__ contains the field
        if self.last_update is None and "last_update" in self.__fields_set__:
            _dict["last_update"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValorantProfileResponse:
        """Create an instance of ValorantProfileResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValorantProfileResponse.parse_obj(obj)

        _obj = ValorantProfileResponse.parse_obj(
            {
                "name": obj.get("name"),
                "tag": obj.get("tag"),
                "puuid": obj.get("puuid"),
                "current_rating": obj.get("current_rating"),
                "peak_rating": obj.get("peak_rating"),
                "peak_rating_act": obj.get("peak_rating_act"),
                "avatar_url": obj.get("avatar_url"),
                "card": Card.from_dict(obj.get("card")) if obj.get("card") is not None else None,
                "account_level": obj.get("account_level"),
                "kd_ratio": obj.get("kd_ratio"),
                "damage_round_ratio": obj.get("damage_round_ratio"),
                "headshot_percent": obj.get("headshot_percent"),
                "win_percent": obj.get("win_percent"),
                "wins": obj.get("wins"),
                "lost": obj.get("lost"),
                "matches_played": obj.get("matches_played"),
                "region": obj.get("region"),
                "kills": obj.get("kills"),
                "deaths": obj.get("deaths"),
                "last_update": obj.get("last_update"),
            },
        )
        return _obj

# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel, Field


class InstagramHighlightResponse(BaseModel):
    """InstagramHighlightResponse."""

    id: Optional[Any] = Field(...)
    created_at: Optional[Any] = None
    latest_reel_media: Optional[Any] = None
    media_count: Optional[Any] = None
    items: Optional[Any] = None
    __properties = ["id", "created_at", "latest_reel_media", "media_count", "items"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstagramHighlightResponse:
        """Create an instance of InstagramHighlightResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict["created_at"] = None

        # set to None if latest_reel_media (nullable) is None
        # and __fields_set__ contains the field
        if self.latest_reel_media is None and "latest_reel_media" in self.__fields_set__:
            _dict["latest_reel_media"] = None

        # set to None if media_count (nullable) is None
        # and __fields_set__ contains the field
        if self.media_count is None and "media_count" in self.__fields_set__:
            _dict["media_count"] = None

        # set to None if items (nullable) is None
        # and __fields_set__ contains the field
        if self.items is None and "items" in self.__fields_set__:
            _dict["items"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstagramHighlightResponse:
        """Create an instance of InstagramHighlightResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstagramHighlightResponse.parse_obj(obj)

        return InstagramHighlightResponse.parse_obj(
            {
                "id": obj.get("id"),
                "created_at": obj.get("created_at"),
                "latest_reel_media": obj.get("latest_reel_media"),
                "media_count": obj.get("media_count"),
                "items": obj.get("items"),
            },
        )

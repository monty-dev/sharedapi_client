# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.bio_member import BioMember
from sharedapi_client.models.bio_request import BioRequest
from sharedapi_client.models.bio_user import BioUser
from sharedapi_client.models.gateway_user_status import GatewayUserStatus
from sharedapi_client.models.profile_model import ProfileModel

class BioResponse(BaseModel):
    """
    BioResponse
    """
    user: Optional[BioUser] = None
    profile_data: Optional[ProfileModel] = None
    member: Optional[BioMember] = None
    activities: Optional[Any] = None
    request: Optional[BioRequest] = None
    status: Optional[GatewayUserStatus] = None
    sig: Optional[Any] = None
    __properties = ["user", "profile_data", "member", "activities", "request", "status", "sig"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BioResponse:
        """Create an instance of BioResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_data
        if self.profile_data:
            _dict['profile_data'] = self.profile_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if activities (nullable) is None
        # and __fields_set__ contains the field
        if self.activities is None and "activities" in self.__fields_set__:
            _dict['activities'] = None

        # set to None if sig (nullable) is None
        # and __fields_set__ contains the field
        if self.sig is None and "sig" in self.__fields_set__:
            _dict['sig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BioResponse:
        """Create an instance of BioResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BioResponse.parse_obj(obj)

        _obj = BioResponse.parse_obj({
            "user": BioUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "profile_data": ProfileModel.from_dict(obj.get("profile_data")) if obj.get("profile_data") is not None else None,
            "member": BioMember.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "activities": obj.get("activities"),
            "request": BioRequest.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "status": GatewayUserStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "sig": obj.get("sig")
        })
        return _obj



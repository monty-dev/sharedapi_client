# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class Video(BaseModel):
    """
    Video
    """
    ratio: Optional[Any] = None
    height: Optional[Any] = None
    width: Optional[Any] = None
    dynamic_cover: Optional[Any] = None
    origin_cover: Optional[Any] = None
    duration: Optional[Any] = None
    __properties = ["ratio", "height", "width", "dynamic_cover", "origin_cover", "duration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Video:
        """Create an instance of Video from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ratio (nullable) is None
        # and __fields_set__ contains the field
        if self.ratio is None and "ratio" in self.__fields_set__:
            _dict['ratio'] = None

        # set to None if height (nullable) is None
        # and __fields_set__ contains the field
        if self.height is None and "height" in self.__fields_set__:
            _dict['height'] = None

        # set to None if width (nullable) is None
        # and __fields_set__ contains the field
        if self.width is None and "width" in self.__fields_set__:
            _dict['width'] = None

        # set to None if dynamic_cover (nullable) is None
        # and __fields_set__ contains the field
        if self.dynamic_cover is None and "dynamic_cover" in self.__fields_set__:
            _dict['dynamic_cover'] = None

        # set to None if origin_cover (nullable) is None
        # and __fields_set__ contains the field
        if self.origin_cover is None and "origin_cover" in self.__fields_set__:
            _dict['origin_cover'] = None

        # set to None if duration (nullable) is None
        # and __fields_set__ contains the field
        if self.duration is None and "duration" in self.__fields_set__:
            _dict['duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Video:
        """Create an instance of Video from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Video.parse_obj(obj)

        _obj = Video.parse_obj({
            "ratio": obj.get("ratio"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "dynamic_cover": obj.get("dynamic_cover"),
            "origin_cover": obj.get("origin_cover"),
            "duration": obj.get("duration")
        })
        return _obj



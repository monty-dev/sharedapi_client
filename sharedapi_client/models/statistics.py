# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class Statistics(BaseModel):
    """Statistics."""

    digg_count: Optional[Any] = None
    play_count: Optional[Any] = None
    share_count: Optional[Any] = None
    comment_count: Optional[Any] = None
    __properties = ["digg_count", "play_count", "share_count", "comment_count"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Statistics:
        """Create an instance of Statistics from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if digg_count (nullable) is None
        # and __fields_set__ contains the field
        if self.digg_count is None and "digg_count" in self.__fields_set__:
            _dict["digg_count"] = None

        # set to None if play_count (nullable) is None
        # and __fields_set__ contains the field
        if self.play_count is None and "play_count" in self.__fields_set__:
            _dict["play_count"] = None

        # set to None if share_count (nullable) is None
        # and __fields_set__ contains the field
        if self.share_count is None and "share_count" in self.__fields_set__:
            _dict["share_count"] = None

        # set to None if comment_count (nullable) is None
        # and __fields_set__ contains the field
        if self.comment_count is None and "comment_count" in self.__fields_set__:
            _dict["comment_count"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Statistics:
        """Create an instance of Statistics from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Statistics.parse_obj(obj)

        _obj = Statistics.parse_obj(
            {
                "digg_count": obj.get("digg_count"),
                "play_count": obj.get("play_count"),
                "share_count": obj.get("share_count"),
                "comment_count": obj.get("comment_count"),
            },
        )
        return _obj

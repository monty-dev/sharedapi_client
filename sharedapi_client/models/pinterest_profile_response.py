# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel, Field


class PinterestProfileResponse(BaseModel):
    """PinterestProfileResponse."""

    username: Optional[Any] = Field(...)
    description: Optional[Any] = None
    followers: Optional[Any] = None
    following: Optional[Any] = None
    pins: Optional[Any] = None
    url: Optional[Any] = None
    avatar_url: Optional[Any] = None
    __properties = ["username", "description", "followers", "following", "pins", "url", "avatar_url"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PinterestProfileResponse:
        """Create an instance of PinterestProfileResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if followers (nullable) is None
        # and __fields_set__ contains the field
        if self.followers is None and "followers" in self.__fields_set__:
            _dict["followers"] = None

        # set to None if following (nullable) is None
        # and __fields_set__ contains the field
        if self.following is None and "following" in self.__fields_set__:
            _dict["following"] = None

        # set to None if pins (nullable) is None
        # and __fields_set__ contains the field
        if self.pins is None and "pins" in self.__fields_set__:
            _dict["pins"] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict["url"] = None

        # set to None if avatar_url (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_url is None and "avatar_url" in self.__fields_set__:
            _dict["avatar_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PinterestProfileResponse:
        """Create an instance of PinterestProfileResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PinterestProfileResponse.parse_obj(obj)

        _obj = PinterestProfileResponse.parse_obj(
            {
                "username": obj.get("username"),
                "description": obj.get("description"),
                "followers": obj.get("followers"),
                "following": obj.get("following"),
                "pins": obj.get("pins"),
                "url": obj.get("url"),
                "avatar_url": obj.get("avatar_url"),
            },
        )
        return _obj

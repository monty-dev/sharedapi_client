# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class STTResult(BaseModel):
    """
    STTResult
    """
    status: Optional[Any] = None
    display_text: Optional[Any] = None
    offset: Optional[Any] = None
    duration: Optional[Any] = None
    detected_languages: Optional[Any] = None
    translated_text: Optional[Any] = None
    __properties = ["status", "display_text", "offset", "duration", "detected_languages", "translated_text"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> STTResult:
        """Create an instance of STTResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if display_text (nullable) is None
        # and __fields_set__ contains the field
        if self.display_text is None and "display_text" in self.__fields_set__:
            _dict['display_text'] = None

        # set to None if offset (nullable) is None
        # and __fields_set__ contains the field
        if self.offset is None and "offset" in self.__fields_set__:
            _dict['offset'] = None

        # set to None if duration (nullable) is None
        # and __fields_set__ contains the field
        if self.duration is None and "duration" in self.__fields_set__:
            _dict['duration'] = None

        # set to None if detected_languages (nullable) is None
        # and __fields_set__ contains the field
        if self.detected_languages is None and "detected_languages" in self.__fields_set__:
            _dict['detected_languages'] = None

        # set to None if translated_text (nullable) is None
        # and __fields_set__ contains the field
        if self.translated_text is None and "translated_text" in self.__fields_set__:
            _dict['translated_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> STTResult:
        """Create an instance of STTResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return STTResult.parse_obj(obj)

        _obj = STTResult.parse_obj({
            "status": obj.get("status"),
            "display_text": obj.get("display_text"),
            "offset": obj.get("offset"),
            "duration": obj.get("duration"),
            "detected_languages": obj.get("detected_languages"),
            "translated_text": obj.get("translated_text")
        })
        return _obj



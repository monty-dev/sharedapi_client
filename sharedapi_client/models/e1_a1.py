# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class E1A1(BaseModel):
    """
    E1A1
    """
    wins: Optional[Any] = None
    number_of_games: Optional[Any] = None
    final_rank: Optional[Any] = None
    final_rank_patched: Optional[Any] = None
    act_rank_wins: Optional[Any] = None
    old: Optional[Any] = None
    __properties = ["wins", "number_of_games", "final_rank", "final_rank_patched", "act_rank_wins", "old"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> E1A1:
        """Create an instance of E1A1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if wins (nullable) is None
        # and __fields_set__ contains the field
        if self.wins is None and "wins" in self.__fields_set__:
            _dict['wins'] = None

        # set to None if number_of_games (nullable) is None
        # and __fields_set__ contains the field
        if self.number_of_games is None and "number_of_games" in self.__fields_set__:
            _dict['number_of_games'] = None

        # set to None if final_rank (nullable) is None
        # and __fields_set__ contains the field
        if self.final_rank is None and "final_rank" in self.__fields_set__:
            _dict['final_rank'] = None

        # set to None if final_rank_patched (nullable) is None
        # and __fields_set__ contains the field
        if self.final_rank_patched is None and "final_rank_patched" in self.__fields_set__:
            _dict['final_rank_patched'] = None

        # set to None if act_rank_wins (nullable) is None
        # and __fields_set__ contains the field
        if self.act_rank_wins is None and "act_rank_wins" in self.__fields_set__:
            _dict['act_rank_wins'] = None

        # set to None if old (nullable) is None
        # and __fields_set__ contains the field
        if self.old is None and "old" in self.__fields_set__:
            _dict['old'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> E1A1:
        """Create an instance of E1A1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return E1A1.parse_obj(obj)

        _obj = E1A1.parse_obj({
            "wins": obj.get("wins"),
            "number_of_games": obj.get("number_of_games"),
            "final_rank": obj.get("final_rank"),
            "final_rank_patched": obj.get("final_rank_patched"),
            "act_rank_wins": obj.get("act_rank_wins"),
            "old": obj.get("old")
        })
        return _obj



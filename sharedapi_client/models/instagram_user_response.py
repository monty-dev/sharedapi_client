# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class InstagramUserResponse(BaseModel):
    """InstagramUserResponse."""

    username: Optional[Any] = None
    full_name: Optional[Any] = None
    is_private: Optional[Any] = None
    avatar_filename: Optional[Any] = None
    avatar_url: Optional[Any] = None
    is_verified: Optional[Any] = None
    __properties = ["username", "full_name", "is_private", "avatar_filename", "avatar_url", "is_verified"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstagramUserResponse:
        """Create an instance of InstagramUserResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if full_name (nullable) is None
        # and __fields_set__ contains the field
        if self.full_name is None and "full_name" in self.__fields_set__:
            _dict["full_name"] = None

        # set to None if is_private (nullable) is None
        # and __fields_set__ contains the field
        if self.is_private is None and "is_private" in self.__fields_set__:
            _dict["is_private"] = None

        # set to None if avatar_filename (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_filename is None and "avatar_filename" in self.__fields_set__:
            _dict["avatar_filename"] = None

        # set to None if avatar_url (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_url is None and "avatar_url" in self.__fields_set__:
            _dict["avatar_url"] = None

        # set to None if is_verified (nullable) is None
        # and __fields_set__ contains the field
        if self.is_verified is None and "is_verified" in self.__fields_set__:
            _dict["is_verified"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstagramUserResponse:
        """Create an instance of InstagramUserResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstagramUserResponse.parse_obj(obj)

        _obj = InstagramUserResponse.parse_obj(
            {
                "username": obj.get("username"),
                "full_name": obj.get("full_name"),
                "is_private": obj.get("is_private"),
                "avatar_filename": obj.get("avatar_filename"),
                "avatar_url": obj.get("avatar_url"),
                "is_verified": obj.get("is_verified"),
            },
        )
        return _obj

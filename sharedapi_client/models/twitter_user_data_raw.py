# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.tweet_data_result import TweetDataResult
from sharedapi_client.models.twitter_userinfo_result import TwitterUserinfoResult

class TwitterUserDataRaw(BaseModel):
    """
    TwitterUserDataRaw
    """
    suspended: Optional[Any] = None
    info: Optional[TwitterUserinfoResult] = None
    tweets: Optional[TweetDataResult] = None
    __properties = ["suspended", "info", "tweets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TwitterUserDataRaw:
        """Create an instance of TwitterUserDataRaw from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tweets
        if self.tweets:
            _dict['tweets'] = self.tweets.to_dict()
        # set to None if suspended (nullable) is None
        # and __fields_set__ contains the field
        if self.suspended is None and "suspended" in self.__fields_set__:
            _dict['suspended'] = None

        # set to None if tweets (nullable) is None
        # and __fields_set__ contains the field
        if self.tweets is None and "tweets" in self.__fields_set__:
            _dict['tweets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TwitterUserDataRaw:
        """Create an instance of TwitterUserDataRaw from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TwitterUserDataRaw.parse_obj(obj)

        _obj = TwitterUserDataRaw.parse_obj({
            "suspended": obj.get("suspended"),
            "info": TwitterUserinfoResult.from_dict(obj.get("info")) if obj.get("info") is not None else None,
            "tweets": TweetDataResult.from_dict(obj.get("tweets")) if obj.get("tweets") is not None else None
        })
        return _obj



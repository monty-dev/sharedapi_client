# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.instagram_user_response import InstagramUserResponse

class InstagramStoryResponse(BaseModel):
    """
    InstagramStoryResponse
    """
    author: Optional[InstagramUserResponse] = None
    items: Optional[Any] = None
    item_count: Optional[Any] = None
    created_at: Optional[Any] = None
    __properties = ["author", "items", "item_count", "created_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstagramStoryResponse:
        """Create an instance of InstagramStoryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # set to None if items (nullable) is None
        # and __fields_set__ contains the field
        if self.items is None and "items" in self.__fields_set__:
            _dict['items'] = None

        # set to None if item_count (nullable) is None
        # and __fields_set__ contains the field
        if self.item_count is None and "item_count" in self.__fields_set__:
            _dict['item_count'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstagramStoryResponse:
        """Create an instance of InstagramStoryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstagramStoryResponse.parse_obj(obj)

        _obj = InstagramStoryResponse.parse_obj({
            "author": InstagramUserResponse.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "items": obj.get("items"),
            "item_count": obj.get("item_count"),
            "created_at": obj.get("created_at")
        })
        return _obj



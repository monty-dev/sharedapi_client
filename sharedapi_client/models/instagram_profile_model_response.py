# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class InstagramProfileModelResponse(BaseModel):
    """InstagramProfileModelResponse."""

    avatar_filename: Optional[Any] = None
    avatar_url: Optional[Any] = None
    bio_links: Optional[Any] = None
    biography: Optional[Any] = None
    external_url: Optional[Any] = None
    followed_by_count: Optional[Any] = None
    following_count: Optional[Any] = None
    full_name: Optional[Any] = None
    has_channel: Optional[Any] = None
    has_clips: Optional[Any] = None
    highlight_reel_count: Optional[Any] = None
    id: Optional[Any] = None
    is_business_account: Optional[Any] = None
    is_joined_recently: Optional[Any] = None
    is_private: Optional[Any] = None
    is_professional_account: Optional[Any] = None
    is_verified: Optional[Any] = None
    post_count: Optional[Any] = None
    pronouns: Optional[Any] = None
    username: Optional[Any] = None
    post_items: Optional[Any] = None
    created_at: Optional[Any] = None
    __properties = [
        "avatar_filename",
        "avatar_url",
        "bio_links",
        "biography",
        "external_url",
        "followed_by_count",
        "following_count",
        "full_name",
        "has_channel",
        "has_clips",
        "highlight_reel_count",
        "id",
        "is_business_account",
        "is_joined_recently",
        "is_private",
        "is_professional_account",
        "is_verified",
        "post_count",
        "pronouns",
        "username",
        "post_items",
        "created_at",
    ]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstagramProfileModelResponse:
        """Create an instance of InstagramProfileModelResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if avatar_filename (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_filename is None and "avatar_filename" in self.__fields_set__:
            _dict["avatar_filename"] = None

        # set to None if avatar_url (nullable) is None
        # and __fields_set__ contains the field
        if self.avatar_url is None and "avatar_url" in self.__fields_set__:
            _dict["avatar_url"] = None

        # set to None if bio_links (nullable) is None
        # and __fields_set__ contains the field
        if self.bio_links is None and "bio_links" in self.__fields_set__:
            _dict["bio_links"] = None

        # set to None if biography (nullable) is None
        # and __fields_set__ contains the field
        if self.biography is None and "biography" in self.__fields_set__:
            _dict["biography"] = None

        # set to None if external_url (nullable) is None
        # and __fields_set__ contains the field
        if self.external_url is None and "external_url" in self.__fields_set__:
            _dict["external_url"] = None

        # set to None if followed_by_count (nullable) is None
        # and __fields_set__ contains the field
        if self.followed_by_count is None and "followed_by_count" in self.__fields_set__:
            _dict["followed_by_count"] = None

        # set to None if following_count (nullable) is None
        # and __fields_set__ contains the field
        if self.following_count is None and "following_count" in self.__fields_set__:
            _dict["following_count"] = None

        # set to None if full_name (nullable) is None
        # and __fields_set__ contains the field
        if self.full_name is None and "full_name" in self.__fields_set__:
            _dict["full_name"] = None

        # set to None if has_channel (nullable) is None
        # and __fields_set__ contains the field
        if self.has_channel is None and "has_channel" in self.__fields_set__:
            _dict["has_channel"] = None

        # set to None if has_clips (nullable) is None
        # and __fields_set__ contains the field
        if self.has_clips is None and "has_clips" in self.__fields_set__:
            _dict["has_clips"] = None

        # set to None if highlight_reel_count (nullable) is None
        # and __fields_set__ contains the field
        if self.highlight_reel_count is None and "highlight_reel_count" in self.__fields_set__:
            _dict["highlight_reel_count"] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if is_business_account (nullable) is None
        # and __fields_set__ contains the field
        if self.is_business_account is None and "is_business_account" in self.__fields_set__:
            _dict["is_business_account"] = None

        # set to None if is_joined_recently (nullable) is None
        # and __fields_set__ contains the field
        if self.is_joined_recently is None and "is_joined_recently" in self.__fields_set__:
            _dict["is_joined_recently"] = None

        # set to None if is_private (nullable) is None
        # and __fields_set__ contains the field
        if self.is_private is None and "is_private" in self.__fields_set__:
            _dict["is_private"] = None

        # set to None if is_professional_account (nullable) is None
        # and __fields_set__ contains the field
        if self.is_professional_account is None and "is_professional_account" in self.__fields_set__:
            _dict["is_professional_account"] = None

        # set to None if is_verified (nullable) is None
        # and __fields_set__ contains the field
        if self.is_verified is None and "is_verified" in self.__fields_set__:
            _dict["is_verified"] = None

        # set to None if post_count (nullable) is None
        # and __fields_set__ contains the field
        if self.post_count is None and "post_count" in self.__fields_set__:
            _dict["post_count"] = None

        # set to None if pronouns (nullable) is None
        # and __fields_set__ contains the field
        if self.pronouns is None and "pronouns" in self.__fields_set__:
            _dict["pronouns"] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict["username"] = None

        # set to None if post_items (nullable) is None
        # and __fields_set__ contains the field
        if self.post_items is None and "post_items" in self.__fields_set__:
            _dict["post_items"] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict["created_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstagramProfileModelResponse:
        """Create an instance of InstagramProfileModelResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstagramProfileModelResponse.parse_obj(obj)

        _obj = InstagramProfileModelResponse.parse_obj(
            {
                "avatar_filename": obj.get("avatar_filename"),
                "avatar_url": obj.get("avatar_url"),
                "bio_links": obj.get("bio_links"),
                "biography": obj.get("biography"),
                "external_url": obj.get("external_url"),
                "followed_by_count": obj.get("followed_by_count"),
                "following_count": obj.get("following_count"),
                "full_name": obj.get("full_name"),
                "has_channel": obj.get("has_channel"),
                "has_clips": obj.get("has_clips"),
                "highlight_reel_count": obj.get("highlight_reel_count"),
                "id": obj.get("id"),
                "is_business_account": obj.get("is_business_account"),
                "is_joined_recently": obj.get("is_joined_recently"),
                "is_private": obj.get("is_private"),
                "is_professional_account": obj.get("is_professional_account"),
                "is_verified": obj.get("is_verified"),
                "post_count": obj.get("post_count"),
                "pronouns": obj.get("pronouns"),
                "username": obj.get("username"),
                "post_items": obj.get("post_items"),
                "created_at": obj.get("created_at"),
            },
        )
        return _obj

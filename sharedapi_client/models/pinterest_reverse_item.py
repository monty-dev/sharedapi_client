# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel


class PinterestReverseItem(BaseModel):
    """PinterestReverseItem."""

    is_uploaded: Optional[Any] = None
    image_large_url: Optional[Any] = None
    type: Optional[Any] = None
    is_repin: Optional[Any] = None
    link: Optional[Any] = None
    is_video: Optional[Any] = None
    id: Optional[Any] = None
    repin_count: Optional[Any] = None
    domain: Optional[Any] = None
    title: Optional[Any] = None
    comment_count: Optional[Any] = None
    description: Optional[Any] = None
    created_at: Optional[Any] = None
    __properties = [
        "is_uploaded",
        "image_large_url",
        "type",
        "is_repin",
        "link",
        "is_video",
        "id",
        "repin_count",
        "domain",
        "title",
        "comment_count",
        "description",
        "created_at",
    ]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PinterestReverseItem:
        """Create an instance of PinterestReverseItem from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if is_uploaded (nullable) is None
        # and __fields_set__ contains the field
        if self.is_uploaded is None and "is_uploaded" in self.__fields_set__:
            _dict["is_uploaded"] = None

        # set to None if image_large_url (nullable) is None
        # and __fields_set__ contains the field
        if self.image_large_url is None and "image_large_url" in self.__fields_set__:
            _dict["image_large_url"] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict["type"] = None

        # set to None if is_repin (nullable) is None
        # and __fields_set__ contains the field
        if self.is_repin is None and "is_repin" in self.__fields_set__:
            _dict["is_repin"] = None

        # set to None if link (nullable) is None
        # and __fields_set__ contains the field
        if self.link is None and "link" in self.__fields_set__:
            _dict["link"] = None

        # set to None if is_video (nullable) is None
        # and __fields_set__ contains the field
        if self.is_video is None and "is_video" in self.__fields_set__:
            _dict["is_video"] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if repin_count (nullable) is None
        # and __fields_set__ contains the field
        if self.repin_count is None and "repin_count" in self.__fields_set__:
            _dict["repin_count"] = None

        # set to None if domain (nullable) is None
        # and __fields_set__ contains the field
        if self.domain is None and "domain" in self.__fields_set__:
            _dict["domain"] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict["title"] = None

        # set to None if comment_count (nullable) is None
        # and __fields_set__ contains the field
        if self.comment_count is None and "comment_count" in self.__fields_set__:
            _dict["comment_count"] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict["created_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PinterestReverseItem:
        """Create an instance of PinterestReverseItem from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PinterestReverseItem.parse_obj(obj)

        _obj = PinterestReverseItem.parse_obj(
            {
                "is_uploaded": obj.get("is_uploaded"),
                "image_large_url": obj.get("image_large_url"),
                "type": obj.get("type"),
                "is_repin": obj.get("is_repin"),
                "link": obj.get("link"),
                "is_video": obj.get("is_video"),
                "id": obj.get("id"),
                "repin_count": obj.get("repin_count"),
                "domain": obj.get("domain"),
                "title": obj.get("title"),
                "comment_count": obj.get("comment_count"),
                "description": obj.get("description"),
                "created_at": obj.get("created_at"),
            },
        )
        return _obj

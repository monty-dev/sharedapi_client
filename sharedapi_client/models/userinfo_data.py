# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.melanie_models_sharedapi_valorant2_card import MelanieModelsSharedapiValorant2Card

class UserinfoData(BaseModel):
    """
    UserinfoData
    """
    puuid: Optional[Any] = None
    region: Optional[Any] = None
    account_level: Optional[Any] = None
    name: Optional[Any] = None
    tag: Optional[Any] = None
    card: Optional[MelanieModelsSharedapiValorant2Card] = None
    last_update: Optional[Any] = None
    last_update_raw: Optional[Any] = None
    __properties = ["puuid", "region", "account_level", "name", "tag", "card", "last_update", "last_update_raw"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserinfoData:
        """Create an instance of UserinfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # set to None if puuid (nullable) is None
        # and __fields_set__ contains the field
        if self.puuid is None and "puuid" in self.__fields_set__:
            _dict['puuid'] = None

        # set to None if region (nullable) is None
        # and __fields_set__ contains the field
        if self.region is None and "region" in self.__fields_set__:
            _dict['region'] = None

        # set to None if account_level (nullable) is None
        # and __fields_set__ contains the field
        if self.account_level is None and "account_level" in self.__fields_set__:
            _dict['account_level'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict['tag'] = None

        # set to None if last_update (nullable) is None
        # and __fields_set__ contains the field
        if self.last_update is None and "last_update" in self.__fields_set__:
            _dict['last_update'] = None

        # set to None if last_update_raw (nullable) is None
        # and __fields_set__ contains the field
        if self.last_update_raw is None and "last_update_raw" in self.__fields_set__:
            _dict['last_update_raw'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserinfoData:
        """Create an instance of UserinfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserinfoData.parse_obj(obj)

        _obj = UserinfoData.parse_obj({
            "puuid": obj.get("puuid"),
            "region": obj.get("region"),
            "account_level": obj.get("account_level"),
            "name": obj.get("name"),
            "tag": obj.get("tag"),
            "card": MelanieModelsSharedapiValorant2Card.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "last_update": obj.get("last_update"),
            "last_update_raw": obj.get("last_update_raw")
        })
        return _obj



# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class HighlightItem(BaseModel):
    """
    HighlightItem
    """
    preview_img: Optional[Any] = None
    title: Optional[Any] = None
    id: Optional[Any] = Field(...)
    __properties = ["preview_img", "title", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HighlightItem:
        """Create an instance of HighlightItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if preview_img (nullable) is None
        # and __fields_set__ contains the field
        if self.preview_img is None and "preview_img" in self.__fields_set__:
            _dict['preview_img'] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict['title'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HighlightItem:
        """Create an instance of HighlightItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HighlightItem.parse_obj(obj)

        _obj = HighlightItem.parse_obj({
            "preview_img": obj.get("preview_img"),
            "title": obj.get("title"),
            "id": obj.get("id")
        })
        return _obj



# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel

from sharedapi_client.models.avatar import Avatar


class CashAppProfile(BaseModel):
    """CashAppProfile."""

    display_name: Optional[Any] = None
    formatted_cashtag: Optional[Any] = None
    is_verified_account: Optional[Any] = None
    rate_plan: Optional[Any] = None
    payment_button_type: Optional[Any] = None
    country_code: Optional[Any] = None
    avatar: Optional[Avatar] = None
    __properties = ["display_name", "formatted_cashtag", "is_verified_account", "rate_plan", "payment_button_type", "country_code", "avatar"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CashAppProfile:
        """Create an instance of CashAppProfile from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of avatar
        if self.avatar:
            _dict["avatar"] = self.avatar.to_dict()
        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict["display_name"] = None

        # set to None if formatted_cashtag (nullable) is None
        # and __fields_set__ contains the field
        if self.formatted_cashtag is None and "formatted_cashtag" in self.__fields_set__:
            _dict["formatted_cashtag"] = None

        # set to None if is_verified_account (nullable) is None
        # and __fields_set__ contains the field
        if self.is_verified_account is None and "is_verified_account" in self.__fields_set__:
            _dict["is_verified_account"] = None

        # set to None if rate_plan (nullable) is None
        # and __fields_set__ contains the field
        if self.rate_plan is None and "rate_plan" in self.__fields_set__:
            _dict["rate_plan"] = None

        # set to None if payment_button_type (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_button_type is None and "payment_button_type" in self.__fields_set__:
            _dict["payment_button_type"] = None

        # set to None if country_code (nullable) is None
        # and __fields_set__ contains the field
        if self.country_code is None and "country_code" in self.__fields_set__:
            _dict["country_code"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CashAppProfile:
        """Create an instance of CashAppProfile from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CashAppProfile.parse_obj(obj)

        _obj = CashAppProfile.parse_obj(
            {
                "display_name": obj.get("display_name"),
                "formatted_cashtag": obj.get("formatted_cashtag"),
                "is_verified_account": obj.get("is_verified_account"),
                "rate_plan": obj.get("rate_plan"),
                "payment_button_type": obj.get("payment_button_type"),
                "country_code": obj.get("country_code"),
                "avatar": Avatar.from_dict(obj.get("avatar")) if obj.get("avatar") is not None else None,
            },
        )
        return _obj

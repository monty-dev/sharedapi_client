# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class Thumbnail(BaseModel):
    """
    Thumbnail
    """
    url: Optional[Any] = None
    preference: Optional[Any] = None
    id: Optional[Any] = None
    height: Optional[Any] = None
    width: Optional[Any] = None
    resolution: Optional[Any] = None
    __properties = ["url", "preference", "id", "height", "width", "resolution"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Thumbnail:
        """Create an instance of Thumbnail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if preference (nullable) is None
        # and __fields_set__ contains the field
        if self.preference is None and "preference" in self.__fields_set__:
            _dict['preference'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if height (nullable) is None
        # and __fields_set__ contains the field
        if self.height is None and "height" in self.__fields_set__:
            _dict['height'] = None

        # set to None if width (nullable) is None
        # and __fields_set__ contains the field
        if self.width is None and "width" in self.__fields_set__:
            _dict['width'] = None

        # set to None if resolution (nullable) is None
        # and __fields_set__ contains the field
        if self.resolution is None and "resolution" in self.__fields_set__:
            _dict['resolution'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Thumbnail:
        """Create an instance of Thumbnail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Thumbnail.parse_obj(obj)

        _obj = Thumbnail.parse_obj({
            "url": obj.get("url"),
            "preference": obj.get("preference"),
            "id": obj.get("id"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "resolution": obj.get("resolution")
        })
        return _obj



# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from sharedapi_client.models.color_palette import ColorPalette

class BannerType(BaseModel):
    """
    BannerType
    """
    banner: Optional[Any] = None
    url: Optional[Any] = None
    color: Optional[ColorPalette] = None
    guild_id: Optional[Any] = None
    format: Optional[Any] = None
    user_id: Optional[Any] = None
    __properties = ["banner", "url", "color", "guild_id", "format", "user_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BannerType:
        """Create an instance of BannerType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # set to None if banner (nullable) is None
        # and __fields_set__ contains the field
        if self.banner is None and "banner" in self.__fields_set__:
            _dict['banner'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if guild_id (nullable) is None
        # and __fields_set__ contains the field
        if self.guild_id is None and "guild_id" in self.__fields_set__:
            _dict['guild_id'] = None

        # set to None if format (nullable) is None
        # and __fields_set__ contains the field
        if self.format is None and "format" in self.__fields_set__:
            _dict['format'] = None

        # set to None if user_id (nullable) is None
        # and __fields_set__ contains the field
        if self.user_id is None and "user_id" in self.__fields_set__:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BannerType:
        """Create an instance of BannerType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BannerType.parse_obj(obj)

        _obj = BannerType.parse_obj({
            "banner": obj.get("banner"),
            "url": obj.get("url"),
            "color": ColorPalette.from_dict(obj.get("color")) if obj.get("color") is not None else None,
            "guild_id": obj.get("guild_id"),
            "format": obj.get("format"),
            "user_id": obj.get("user_id")
        })
        return _obj



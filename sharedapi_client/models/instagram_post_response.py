# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel

from sharedapi_client.models.instagram_user_response import InstagramUserResponse


class InstagramPostResponse(BaseModel):
    """InstagramPostResponse."""

    num_results: Optional[Any] = None
    share_url: Optional[Any] = None
    author: Optional[InstagramUserResponse] = None
    items: Optional[Any] = None
    __properties = ["num_results", "share_url", "author", "items"]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstagramPostResponse:
        """Create an instance of InstagramPostResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict["author"] = self.author.to_dict()
        # set to None if num_results (nullable) is None
        # and __fields_set__ contains the field
        if self.num_results is None and "num_results" in self.__fields_set__:
            _dict["num_results"] = None

        # set to None if share_url (nullable) is None
        # and __fields_set__ contains the field
        if self.share_url is None and "share_url" in self.__fields_set__:
            _dict["share_url"] = None

        # set to None if items (nullable) is None
        # and __fields_set__ contains the field
        if self.items is None and "items" in self.__fields_set__:
            _dict["items"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstagramPostResponse:
        """Create an instance of InstagramPostResponse from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstagramPostResponse.parse_obj(obj)

        return InstagramPostResponse.parse_obj(
            {
                "num_results": obj.get("num_results"),
                "share_url": obj.get("share_url"),
                "author": InstagramUserResponse.from_dict(obj.get("author")) if obj.get("author") is not None else None,
                "items": obj.get("items"),
            },
        )

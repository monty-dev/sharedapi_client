# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Optional

from pydantic import BaseModel

from sharedapi_client.models.downloader_options1 import DownloaderOptions1
from sharedapi_client.models.http_headers1 import HttpHeaders1
from sharedapi_client.models.subtitles import Subtitles


class SearchResult(BaseModel):
    """SearchResult."""

    id: Optional[Any] = None
    title: Optional[Any] = None
    formats: Optional[Any] = None
    thumbnails: Optional[Any] = None
    thumbnail: Optional[Any] = None
    description: Optional[Any] = None
    uploader: Optional[Any] = None
    uploader_id: Optional[Any] = None
    uploader_url: Optional[Any] = None
    channel_id: Optional[Any] = None
    channel_url: Optional[Any] = None
    duration: Optional[Any] = None
    view_count: Optional[Any] = None
    average_rating: Optional[Any] = None
    age_limit: Optional[Any] = None
    webpage_url: Optional[Any] = None
    categories: Optional[Any] = None
    tags: Optional[Any] = None
    playable_in_embed: Optional[Any] = None
    is_live: Optional[Any] = None
    was_live: Optional[Any] = None
    live_status: Optional[Any] = None
    release_timestamp: Optional[Any] = None
    automatic_captions: Optional[Any] = None
    subtitles: Optional[Subtitles] = None
    comment_count: Optional[Any] = None
    chapters: Optional[Any] = None
    like_count: Optional[Any] = None
    channel: Optional[Any] = None
    channel_follower_count: Optional[Any] = None
    upload_date: Optional[Any] = None
    availability: Optional[Any] = None
    original_url: Optional[Any] = None
    webpage_url_basename: Optional[Any] = None
    webpage_url_domain: Optional[Any] = None
    extractor: Optional[Any] = None
    extractor_key: Optional[Any] = None
    playlist_count: Optional[Any] = None
    playlist: Optional[Any] = None
    playlist_id: Optional[Any] = None
    playlist_title: Optional[Any] = None
    playlist_uploader: Optional[Any] = None
    playlist_uploader_id: Optional[Any] = None
    n_entries: Optional[Any] = None
    playlist_index: Optional[Any] = None
    playlist_autonumber: Optional[Any] = None
    display_id: Optional[Any] = None
    fulltitle: Optional[Any] = None
    duration_string: Optional[Any] = None
    release_date: Optional[Any] = None
    requested_subtitles: Optional[Any] = None
    asr: Optional[Any] = None
    filesize: Optional[Any] = None
    format_id: Optional[Any] = None
    format_note: Optional[Any] = None
    source_preference: Optional[Any] = None
    fps: Optional[Any] = None
    audio_channels: Optional[Any] = None
    height: Optional[Any] = None
    quality: Optional[Any] = None
    has_drm: Optional[Any] = None
    tbr: Optional[Any] = None
    url: Optional[Any] = None
    width: Optional[Any] = None
    language: Optional[Any] = None
    language_preference: Optional[Any] = None
    ext: Optional[Any] = None
    vcodec: Optional[Any] = None
    acodec: Optional[Any] = None
    abr: Optional[Any] = None
    downloader_options: Optional[DownloaderOptions1] = None
    container: Optional[Any] = None
    protocol: Optional[Any] = None
    audio_ext: Optional[Any] = None
    video_ext: Optional[Any] = None
    format: Optional[Any] = None
    resolution: Optional[Any] = None
    http_headers: Optional[HttpHeaders1] = None
    __properties = [
        "id",
        "title",
        "formats",
        "thumbnails",
        "thumbnail",
        "description",
        "uploader",
        "uploader_id",
        "uploader_url",
        "channel_id",
        "channel_url",
        "duration",
        "view_count",
        "average_rating",
        "age_limit",
        "webpage_url",
        "categories",
        "tags",
        "playable_in_embed",
        "is_live",
        "was_live",
        "live_status",
        "release_timestamp",
        "automatic_captions",
        "subtitles",
        "comment_count",
        "chapters",
        "like_count",
        "channel",
        "channel_follower_count",
        "upload_date",
        "availability",
        "original_url",
        "webpage_url_basename",
        "webpage_url_domain",
        "extractor",
        "extractor_key",
        "playlist_count",
        "playlist",
        "playlist_id",
        "playlist_title",
        "playlist_uploader",
        "playlist_uploader_id",
        "n_entries",
        "playlist_index",
        "playlist_autonumber",
        "display_id",
        "fulltitle",
        "duration_string",
        "release_date",
        "requested_subtitles",
        "asr",
        "filesize",
        "format_id",
        "format_note",
        "source_preference",
        "fps",
        "audio_channels",
        "height",
        "quality",
        "has_drm",
        "tbr",
        "url",
        "width",
        "language",
        "language_preference",
        "ext",
        "vcodec",
        "acodec",
        "abr",
        "downloader_options",
        "container",
        "protocol",
        "audio_ext",
        "video_ext",
        "format",
        "resolution",
        "http_headers",
    ]

    class Config:
        """Pydantic configuration."""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchResult:
        """Create an instance of SearchResult from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subtitles
        if self.subtitles:
            _dict["subtitles"] = self.subtitles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of downloader_options
        if self.downloader_options:
            _dict["downloader_options"] = self.downloader_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_headers
        if self.http_headers:
            _dict["http_headers"] = self.http_headers.to_dict()
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict["title"] = None

        # set to None if formats (nullable) is None
        # and __fields_set__ contains the field
        if self.formats is None and "formats" in self.__fields_set__:
            _dict["formats"] = None

        # set to None if thumbnails (nullable) is None
        # and __fields_set__ contains the field
        if self.thumbnails is None and "thumbnails" in self.__fields_set__:
            _dict["thumbnails"] = None

        # set to None if thumbnail (nullable) is None
        # and __fields_set__ contains the field
        if self.thumbnail is None and "thumbnail" in self.__fields_set__:
            _dict["thumbnail"] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if uploader (nullable) is None
        # and __fields_set__ contains the field
        if self.uploader is None and "uploader" in self.__fields_set__:
            _dict["uploader"] = None

        # set to None if uploader_id (nullable) is None
        # and __fields_set__ contains the field
        if self.uploader_id is None and "uploader_id" in self.__fields_set__:
            _dict["uploader_id"] = None

        # set to None if uploader_url (nullable) is None
        # and __fields_set__ contains the field
        if self.uploader_url is None and "uploader_url" in self.__fields_set__:
            _dict["uploader_url"] = None

        # set to None if channel_id (nullable) is None
        # and __fields_set__ contains the field
        if self.channel_id is None and "channel_id" in self.__fields_set__:
            _dict["channel_id"] = None

        # set to None if channel_url (nullable) is None
        # and __fields_set__ contains the field
        if self.channel_url is None and "channel_url" in self.__fields_set__:
            _dict["channel_url"] = None

        # set to None if duration (nullable) is None
        # and __fields_set__ contains the field
        if self.duration is None and "duration" in self.__fields_set__:
            _dict["duration"] = None

        # set to None if view_count (nullable) is None
        # and __fields_set__ contains the field
        if self.view_count is None and "view_count" in self.__fields_set__:
            _dict["view_count"] = None

        # set to None if average_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.average_rating is None and "average_rating" in self.__fields_set__:
            _dict["average_rating"] = None

        # set to None if age_limit (nullable) is None
        # and __fields_set__ contains the field
        if self.age_limit is None and "age_limit" in self.__fields_set__:
            _dict["age_limit"] = None

        # set to None if webpage_url (nullable) is None
        # and __fields_set__ contains the field
        if self.webpage_url is None and "webpage_url" in self.__fields_set__:
            _dict["webpage_url"] = None

        # set to None if categories (nullable) is None
        # and __fields_set__ contains the field
        if self.categories is None and "categories" in self.__fields_set__:
            _dict["categories"] = None

        # set to None if tags (nullable) is None
        # and __fields_set__ contains the field
        if self.tags is None and "tags" in self.__fields_set__:
            _dict["tags"] = None

        # set to None if playable_in_embed (nullable) is None
        # and __fields_set__ contains the field
        if self.playable_in_embed is None and "playable_in_embed" in self.__fields_set__:
            _dict["playable_in_embed"] = None

        # set to None if is_live (nullable) is None
        # and __fields_set__ contains the field
        if self.is_live is None and "is_live" in self.__fields_set__:
            _dict["is_live"] = None

        # set to None if was_live (nullable) is None
        # and __fields_set__ contains the field
        if self.was_live is None and "was_live" in self.__fields_set__:
            _dict["was_live"] = None

        # set to None if live_status (nullable) is None
        # and __fields_set__ contains the field
        if self.live_status is None and "live_status" in self.__fields_set__:
            _dict["live_status"] = None

        # set to None if release_timestamp (nullable) is None
        # and __fields_set__ contains the field
        if self.release_timestamp is None and "release_timestamp" in self.__fields_set__:
            _dict["release_timestamp"] = None

        # set to None if automatic_captions (nullable) is None
        # and __fields_set__ contains the field
        if self.automatic_captions is None and "automatic_captions" in self.__fields_set__:
            _dict["automatic_captions"] = None

        # set to None if comment_count (nullable) is None
        # and __fields_set__ contains the field
        if self.comment_count is None and "comment_count" in self.__fields_set__:
            _dict["comment_count"] = None

        # set to None if chapters (nullable) is None
        # and __fields_set__ contains the field
        if self.chapters is None and "chapters" in self.__fields_set__:
            _dict["chapters"] = None

        # set to None if like_count (nullable) is None
        # and __fields_set__ contains the field
        if self.like_count is None and "like_count" in self.__fields_set__:
            _dict["like_count"] = None

        # set to None if channel (nullable) is None
        # and __fields_set__ contains the field
        if self.channel is None and "channel" in self.__fields_set__:
            _dict["channel"] = None

        # set to None if channel_follower_count (nullable) is None
        # and __fields_set__ contains the field
        if self.channel_follower_count is None and "channel_follower_count" in self.__fields_set__:
            _dict["channel_follower_count"] = None

        # set to None if upload_date (nullable) is None
        # and __fields_set__ contains the field
        if self.upload_date is None and "upload_date" in self.__fields_set__:
            _dict["upload_date"] = None

        # set to None if availability (nullable) is None
        # and __fields_set__ contains the field
        if self.availability is None and "availability" in self.__fields_set__:
            _dict["availability"] = None

        # set to None if original_url (nullable) is None
        # and __fields_set__ contains the field
        if self.original_url is None and "original_url" in self.__fields_set__:
            _dict["original_url"] = None

        # set to None if webpage_url_basename (nullable) is None
        # and __fields_set__ contains the field
        if self.webpage_url_basename is None and "webpage_url_basename" in self.__fields_set__:
            _dict["webpage_url_basename"] = None

        # set to None if webpage_url_domain (nullable) is None
        # and __fields_set__ contains the field
        if self.webpage_url_domain is None and "webpage_url_domain" in self.__fields_set__:
            _dict["webpage_url_domain"] = None

        # set to None if extractor (nullable) is None
        # and __fields_set__ contains the field
        if self.extractor is None and "extractor" in self.__fields_set__:
            _dict["extractor"] = None

        # set to None if extractor_key (nullable) is None
        # and __fields_set__ contains the field
        if self.extractor_key is None and "extractor_key" in self.__fields_set__:
            _dict["extractor_key"] = None

        # set to None if playlist_count (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_count is None and "playlist_count" in self.__fields_set__:
            _dict["playlist_count"] = None

        # set to None if playlist (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist is None and "playlist" in self.__fields_set__:
            _dict["playlist"] = None

        # set to None if playlist_id (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_id is None and "playlist_id" in self.__fields_set__:
            _dict["playlist_id"] = None

        # set to None if playlist_title (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_title is None and "playlist_title" in self.__fields_set__:
            _dict["playlist_title"] = None

        # set to None if playlist_uploader (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_uploader is None and "playlist_uploader" in self.__fields_set__:
            _dict["playlist_uploader"] = None

        # set to None if playlist_uploader_id (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_uploader_id is None and "playlist_uploader_id" in self.__fields_set__:
            _dict["playlist_uploader_id"] = None

        # set to None if n_entries (nullable) is None
        # and __fields_set__ contains the field
        if self.n_entries is None and "n_entries" in self.__fields_set__:
            _dict["n_entries"] = None

        # set to None if playlist_index (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_index is None and "playlist_index" in self.__fields_set__:
            _dict["playlist_index"] = None

        # set to None if playlist_autonumber (nullable) is None
        # and __fields_set__ contains the field
        if self.playlist_autonumber is None and "playlist_autonumber" in self.__fields_set__:
            _dict["playlist_autonumber"] = None

        # set to None if display_id (nullable) is None
        # and __fields_set__ contains the field
        if self.display_id is None and "display_id" in self.__fields_set__:
            _dict["display_id"] = None

        # set to None if fulltitle (nullable) is None
        # and __fields_set__ contains the field
        if self.fulltitle is None and "fulltitle" in self.__fields_set__:
            _dict["fulltitle"] = None

        # set to None if duration_string (nullable) is None
        # and __fields_set__ contains the field
        if self.duration_string is None and "duration_string" in self.__fields_set__:
            _dict["duration_string"] = None

        # set to None if release_date (nullable) is None
        # and __fields_set__ contains the field
        if self.release_date is None and "release_date" in self.__fields_set__:
            _dict["release_date"] = None

        # set to None if requested_subtitles (nullable) is None
        # and __fields_set__ contains the field
        if self.requested_subtitles is None and "requested_subtitles" in self.__fields_set__:
            _dict["requested_subtitles"] = None

        # set to None if asr (nullable) is None
        # and __fields_set__ contains the field
        if self.asr is None and "asr" in self.__fields_set__:
            _dict["asr"] = None

        # set to None if filesize (nullable) is None
        # and __fields_set__ contains the field
        if self.filesize is None and "filesize" in self.__fields_set__:
            _dict["filesize"] = None

        # set to None if format_id (nullable) is None
        # and __fields_set__ contains the field
        if self.format_id is None and "format_id" in self.__fields_set__:
            _dict["format_id"] = None

        # set to None if format_note (nullable) is None
        # and __fields_set__ contains the field
        if self.format_note is None and "format_note" in self.__fields_set__:
            _dict["format_note"] = None

        # set to None if source_preference (nullable) is None
        # and __fields_set__ contains the field
        if self.source_preference is None and "source_preference" in self.__fields_set__:
            _dict["source_preference"] = None

        # set to None if fps (nullable) is None
        # and __fields_set__ contains the field
        if self.fps is None and "fps" in self.__fields_set__:
            _dict["fps"] = None

        # set to None if audio_channels (nullable) is None
        # and __fields_set__ contains the field
        if self.audio_channels is None and "audio_channels" in self.__fields_set__:
            _dict["audio_channels"] = None

        # set to None if height (nullable) is None
        # and __fields_set__ contains the field
        if self.height is None and "height" in self.__fields_set__:
            _dict["height"] = None

        # set to None if quality (nullable) is None
        # and __fields_set__ contains the field
        if self.quality is None and "quality" in self.__fields_set__:
            _dict["quality"] = None

        # set to None if has_drm (nullable) is None
        # and __fields_set__ contains the field
        if self.has_drm is None and "has_drm" in self.__fields_set__:
            _dict["has_drm"] = None

        # set to None if tbr (nullable) is None
        # and __fields_set__ contains the field
        if self.tbr is None and "tbr" in self.__fields_set__:
            _dict["tbr"] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict["url"] = None

        # set to None if width (nullable) is None
        # and __fields_set__ contains the field
        if self.width is None and "width" in self.__fields_set__:
            _dict["width"] = None

        # set to None if language (nullable) is None
        # and __fields_set__ contains the field
        if self.language is None and "language" in self.__fields_set__:
            _dict["language"] = None

        # set to None if language_preference (nullable) is None
        # and __fields_set__ contains the field
        if self.language_preference is None and "language_preference" in self.__fields_set__:
            _dict["language_preference"] = None

        # set to None if ext (nullable) is None
        # and __fields_set__ contains the field
        if self.ext is None and "ext" in self.__fields_set__:
            _dict["ext"] = None

        # set to None if vcodec (nullable) is None
        # and __fields_set__ contains the field
        if self.vcodec is None and "vcodec" in self.__fields_set__:
            _dict["vcodec"] = None

        # set to None if acodec (nullable) is None
        # and __fields_set__ contains the field
        if self.acodec is None and "acodec" in self.__fields_set__:
            _dict["acodec"] = None

        # set to None if abr (nullable) is None
        # and __fields_set__ contains the field
        if self.abr is None and "abr" in self.__fields_set__:
            _dict["abr"] = None

        # set to None if container (nullable) is None
        # and __fields_set__ contains the field
        if self.container is None and "container" in self.__fields_set__:
            _dict["container"] = None

        # set to None if protocol (nullable) is None
        # and __fields_set__ contains the field
        if self.protocol is None and "protocol" in self.__fields_set__:
            _dict["protocol"] = None

        # set to None if audio_ext (nullable) is None
        # and __fields_set__ contains the field
        if self.audio_ext is None and "audio_ext" in self.__fields_set__:
            _dict["audio_ext"] = None

        # set to None if video_ext (nullable) is None
        # and __fields_set__ contains the field
        if self.video_ext is None and "video_ext" in self.__fields_set__:
            _dict["video_ext"] = None

        # set to None if format (nullable) is None
        # and __fields_set__ contains the field
        if self.format is None and "format" in self.__fields_set__:
            _dict["format"] = None

        # set to None if resolution (nullable) is None
        # and __fields_set__ contains the field
        if self.resolution is None and "resolution" in self.__fields_set__:
            _dict["resolution"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchResult:
        """Create an instance of SearchResult from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchResult.parse_obj(obj)

        return SearchResult.parse_obj(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "formats": obj.get("formats"),
                "thumbnails": obj.get("thumbnails"),
                "thumbnail": obj.get("thumbnail"),
                "description": obj.get("description"),
                "uploader": obj.get("uploader"),
                "uploader_id": obj.get("uploader_id"),
                "uploader_url": obj.get("uploader_url"),
                "channel_id": obj.get("channel_id"),
                "channel_url": obj.get("channel_url"),
                "duration": obj.get("duration"),
                "view_count": obj.get("view_count"),
                "average_rating": obj.get("average_rating"),
                "age_limit": obj.get("age_limit"),
                "webpage_url": obj.get("webpage_url"),
                "categories": obj.get("categories"),
                "tags": obj.get("tags"),
                "playable_in_embed": obj.get("playable_in_embed"),
                "is_live": obj.get("is_live"),
                "was_live": obj.get("was_live"),
                "live_status": obj.get("live_status"),
                "release_timestamp": obj.get("release_timestamp"),
                "subtitles": Subtitles.from_dict(obj.get("subtitles")) if obj.get("subtitles") is not None else None,
                "comment_count": obj.get("comment_count"),
                "chapters": obj.get("chapters"),
                "like_count": obj.get("like_count"),
                "channel": obj.get("channel"),
                "channel_follower_count": obj.get("channel_follower_count"),
                "upload_date": obj.get("upload_date"),
                "availability": obj.get("availability"),
                "original_url": obj.get("original_url"),
                "webpage_url_basename": obj.get("webpage_url_basename"),
                "webpage_url_domain": obj.get("webpage_url_domain"),
                "extractor": obj.get("extractor"),
                "extractor_key": obj.get("extractor_key"),
                "playlist_count": obj.get("playlist_count"),
                "playlist": obj.get("playlist"),
                "playlist_id": obj.get("playlist_id"),
                "playlist_title": obj.get("playlist_title"),
                "playlist_uploader": obj.get("playlist_uploader"),
                "playlist_uploader_id": obj.get("playlist_uploader_id"),
                "n_entries": obj.get("n_entries"),
                "playlist_index": obj.get("playlist_index"),
                "playlist_autonumber": obj.get("playlist_autonumber"),
                "display_id": obj.get("display_id"),
                "fulltitle": obj.get("fulltitle"),
                "duration_string": obj.get("duration_string"),
                "release_date": obj.get("release_date"),
                "requested_subtitles": obj.get("requested_subtitles"),
                "asr": obj.get("asr"),
                "filesize": obj.get("filesize"),
                "format_id": obj.get("format_id"),
                "format_note": obj.get("format_note"),
                "source_preference": obj.get("source_preference"),
                "fps": obj.get("fps"),
                "audio_channels": obj.get("audio_channels"),
                "height": obj.get("height"),
                "quality": obj.get("quality"),
                "has_drm": obj.get("has_drm"),
                "tbr": obj.get("tbr"),
                "url": obj.get("url"),
                "width": obj.get("width"),
                "language": obj.get("language"),
                "language_preference": obj.get("language_preference"),
                "ext": obj.get("ext"),
                "vcodec": obj.get("vcodec"),
                "acodec": obj.get("acodec"),
                "abr": obj.get("abr"),
                "downloader_options": DownloaderOptions1.from_dict(obj.get("downloader_options")) if obj.get("downloader_options") is not None else None,
                "container": obj.get("container"),
                "protocol": obj.get("protocol"),
                "audio_ext": obj.get("audio_ext"),
                "video_ext": obj.get("video_ext"),
                "format": obj.get("format"),
                "resolution": obj.get("resolution"),
                "http_headers": HttpHeaders1.from_dict(obj.get("http_headers")) if obj.get("http_headers") is not None else None,
            },
        )

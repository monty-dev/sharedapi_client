# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
from typing import Any, Awaitable, Optional, Union, overload

from pydantic import Field, validate_arguments
from typing_extensions import Annotated

from sharedapi_client.api_client import ApiClient
from sharedapi_client.api_response import ApiResponse
from sharedapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from sharedapi_client.models.cashapp_profile_response import CashappProfileResponse
from sharedapi_client.models.ip_lookup_result_response import IPLookupResultResponse
from sharedapi_client.models.telegram_profile_response import TelegramProfileResponse


class WebApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def get_cashappprofile(self, username: Any, **kwargs) -> CashappProfileResponse:  # noqa: E501
        ...

    @overload
    def get_cashappprofile(self, username: Any, async_req: Optional[bool] = True, **kwargs) -> CashappProfileResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_cashappprofile(
        self,
        username: Any,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[CashappProfileResponse, Awaitable[CashappProfileResponse]]:  # noqa: E501
        """Get Cashapp Profile  # noqa: E501.

        Fetch a Cashapp user!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cashappprofile(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CashappProfileResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_cashappprofile_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.get_cashappprofile_with_http_info(username, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cashappprofile_with_http_info(self, username: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Cashapp Profile  # noqa: E501.

        Fetch a Cashapp user!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cashappprofile_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CashappProfileResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["username", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method get_cashappprofile"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "CashappProfileResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/cashapp/{username}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def get_telegram_u_ser(self, username: Any, **kwargs) -> TelegramProfileResponse:  # noqa: E501
        ...

    @overload
    def get_telegram_u_ser(self, username: Any, async_req: Optional[bool] = True, **kwargs) -> TelegramProfileResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_telegram_u_ser(
        self,
        username: Any,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[TelegramProfileResponse, Awaitable[TelegramProfileResponse]]:  # noqa: E501
        """Get Telegram User  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_telegram_u_ser(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TelegramProfileResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_telegram_u_ser_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.get_telegram_u_ser_with_http_info(username, **kwargs)  # noqa: E501

    @validate_arguments
    def get_telegram_u_ser_with_http_info(self, username: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Telegram User  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_telegram_u_ser_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TelegramProfileResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["username", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method get_telegram_u_ser"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "TelegramProfileResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/web/telegram/{username}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def i_plookup(
        self,
        address: Annotated[Any, Field(..., description="Full IP address or range to query info on")],
        **kwargs,
    ) -> IPLookupResultResponse:  # noqa: E501
        ...

    @overload
    def i_plookup(
        self,
        address: Annotated[Any, Field(..., description="Full IP address or range to query info on")],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> IPLookupResultResponse:  # noqa: E501
        ...

    @validate_arguments
    def i_plookup(
        self,
        address: Annotated[Any, Field(..., description="Full IP address or range to query info on")],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[IPLookupResultResponse, Awaitable[IPLookupResultResponse]]:  # noqa: E501
        """Ip Lookup  # noqa: E501.

        Get information on an IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_plookup(address, async_req=True)
        >>> result = thread.get()

        :param address: Full IP address or range to query info on (required)
        :type address: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IPLookupResultResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the i_plookup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.i_plookup_with_http_info(address, **kwargs)  # noqa: E501

    @validate_arguments
    def i_plookup_with_http_info(
        self,
        address: Annotated[Any, Field(..., description="Full IP address or range to query info on")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Ip Lookup  # noqa: E501.

        Get information on an IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_plookup_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param address: Full IP address or range to query info on (required)
        :type address: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IPLookupResultResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["address", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method i_plookup"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address"]:
            _path_params["address"] = _params["address"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "IPLookupResultResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/web/ip/{address}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def loada_spotifyplaylist(
        self,
        playlist_id: Any,
        plain: Optional[Any] = None,
        transform: Optional[Any] = None,
        name: Optional[Any] = None,
        clean: Optional[Any] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        ...

    @overload
    def loada_spotifyplaylist(
        self,
        playlist_id: Any,
        plain: Optional[Any] = None,
        transform: Optional[Any] = None,
        name: Optional[Any] = None,
        clean: Optional[Any] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> object:  # noqa: E501
        ...

    @validate_arguments
    def loada_spotifyplaylist(
        self,
        playlist_id: Any,
        plain: Optional[Any] = None,
        transform: Optional[Any] = None,
        name: Optional[Any] = None,
        clean: Optional[Any] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[object, Awaitable[object]]:  # noqa: E501
        """Load A Spotify Playlist  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loada_spotifyplaylist(playlist_id, plain, transform, name, clean, async_req=True)
        >>> result = thread.get()

        :param playlist_id: (required)
        :type playlist_id: object
        :param plain:
        :type plain: object
        :param transform:
        :type transform: object
        :param name:
        :type name: object
        :param clean:
        :type clean: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the loada_spotifyplaylist_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.loada_spotifyplaylist_with_http_info(playlist_id, plain, transform, name, clean, **kwargs)  # noqa: E501

    @validate_arguments
    def loada_spotifyplaylist_with_http_info(
        self,
        playlist_id: Any,
        plain: Optional[Any] = None,
        transform: Optional[Any] = None,
        name: Optional[Any] = None,
        clean: Optional[Any] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Load A Spotify Playlist  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loada_spotifyplaylist_with_http_info(playlist_id, plain, transform, name, clean, async_req=True)
        >>> result = thread.get()

        :param playlist_id: (required)
        :type playlist_id: object
        :param plain:
        :type plain: object
        :param transform:
        :type transform: object
        :param name:
        :type name: object
        :param clean:
        :type clean: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = [
            "playlist_id",
            "plain",
            "transform",
            "name",
            "clean",
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_auth",
            "_content_type",
            "_headers",
        ]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method loada_spotifyplaylist"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["playlist_id"]:
            _path_params["playlist_id"] = _params["playlist_id"]

        # process the query parameters
        _query_params = []
        if _params.get("plain") is not None:  # noqa: E501
            _query_params.append(("plain", _params["plain"]))

        if _params.get("transform") is not None:  # noqa: E501
            _query_params.append(("transform", _params["transform"]))

        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("clean") is not None:  # noqa: E501
            _query_params.append(("clean", _params["clean"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "object", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/spotify/playlist/{playlist_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def screenshotweb(
        self,
        url: Annotated[Any, Field(..., description="URL to screnshot")],
        user_id: Annotated[Optional[Any], Field(description="User ID requesting the screenshot.")] = None,
        safe: Annotated[Optional[Any], Field(description="Check the URL's domain against porn malware lists.")] = None,
        until: Annotated[Optional[Any], Field(description="puppeteer wait method.")] = None,
        nsfw_check: Annotated[Optional[Any], Field(description="Run the image result through AI content moderation  ")] = None,
        full_page: Annotated[Optional[Any], Field(description="Waits for page to load, scrolls to bottom")] = None,
        image_type: Annotated[Optional[Any], Field(description="png or jpeg")] = None,
        imgerr: Annotated[Optional[Any], Field(description="OK to return an image on failure or send HTTP error code")] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        ...

    @overload
    def screenshotweb(
        self,
        url: Annotated[Any, Field(..., description="URL to screnshot")],
        user_id: Annotated[Optional[Any], Field(description="User ID requesting the screenshot.")] = None,
        safe: Annotated[Optional[Any], Field(description="Check the URL's domain against porn malware lists.")] = None,
        until: Annotated[Optional[Any], Field(description="puppeteer wait method.")] = None,
        nsfw_check: Annotated[Optional[Any], Field(description="Run the image result through AI content moderation  ")] = None,
        full_page: Annotated[Optional[Any], Field(description="Waits for page to load, scrolls to bottom")] = None,
        image_type: Annotated[Optional[Any], Field(description="png or jpeg")] = None,
        imgerr: Annotated[Optional[Any], Field(description="OK to return an image on failure or send HTTP error code")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> object:  # noqa: E501
        ...

    @validate_arguments
    def screenshotweb(
        self,
        url: Annotated[Any, Field(..., description="URL to screnshot")],
        user_id: Annotated[Optional[Any], Field(description="User ID requesting the screenshot.")] = None,
        safe: Annotated[Optional[Any], Field(description="Check the URL's domain against porn malware lists.")] = None,
        until: Annotated[Optional[Any], Field(description="puppeteer wait method.")] = None,
        nsfw_check: Annotated[Optional[Any], Field(description="Run the image result through AI content moderation  ")] = None,
        full_page: Annotated[Optional[Any], Field(description="Waits for page to load, scrolls to bottom")] = None,
        image_type: Annotated[Optional[Any], Field(description="png or jpeg")] = None,
        imgerr: Annotated[Optional[Any], Field(description="OK to return an image on failure or send HTTP error code")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[object, Awaitable[object]]:  # noqa: E501
        """Screenshot Web  # noqa: E501.

        Screenshot a webpage with Chrome  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.screenshotweb(url, user_id, safe, until, nsfw_check, full_page, image_type, imgerr, async_req=True)
        >>> result = thread.get()

        :param url: URL to screnshot (required)
        :type url: object
        :param user_id: User ID requesting the screenshot.
        :type user_id: object
        :param safe: Check the URL's domain against porn malware lists.
        :type safe: object
        :param until: puppeteer wait method.
        :type until: PuppeteerLoadMethod
        :param nsfw_check: Run the image result through AI content moderation
        :type nsfw_check: object
        :param full_page: Waits for page to load, scrolls to bottom
        :type full_page: object
        :param image_type: png or jpeg
        :type image_type: object
        :param imgerr: OK to return an image on failure or send HTTP error code
        :type imgerr: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the screenshotweb_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.screenshotweb_with_http_info(url, user_id, safe, until, nsfw_check, full_page, image_type, imgerr, **kwargs)  # noqa: E501

    @validate_arguments
    def screenshotweb_with_http_info(
        self,
        url: Annotated[Any, Field(..., description="URL to screnshot")],
        user_id: Annotated[Optional[Any], Field(description="User ID requesting the screenshot.")] = None,
        safe: Annotated[Optional[Any], Field(description="Check the URL's domain against porn malware lists.")] = None,
        until: Annotated[Optional[Any], Field(description="puppeteer wait method.")] = None,
        nsfw_check: Annotated[Optional[Any], Field(description="Run the image result through AI content moderation  ")] = None,
        full_page: Annotated[Optional[Any], Field(description="Waits for page to load, scrolls to bottom")] = None,
        image_type: Annotated[Optional[Any], Field(description="png or jpeg")] = None,
        imgerr: Annotated[Optional[Any], Field(description="OK to return an image on failure or send HTTP error code")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Screenshot Web  # noqa: E501.

        Screenshot a webpage with Chrome  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.screenshotweb_with_http_info(url, user_id, safe, until, nsfw_check, full_page, image_type, imgerr, async_req=True)
        >>> result = thread.get()

        :param url: URL to screnshot (required)
        :type url: object
        :param user_id: User ID requesting the screenshot.
        :type user_id: object
        :param safe: Check the URL's domain against porn malware lists.
        :type safe: object
        :param until: puppeteer wait method.
        :type until: PuppeteerLoadMethod
        :param nsfw_check: Run the image result through AI content moderation
        :type nsfw_check: object
        :param full_page: Waits for page to load, scrolls to bottom
        :type full_page: object
        :param image_type: png or jpeg
        :type image_type: object
        :param imgerr: OK to return an image on failure or send HTTP error code
        :type imgerr: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = [
            "url",
            "user_id",
            "safe",
            "until",
            "nsfw_check",
            "full_page",
            "image_type",
            "imgerr",
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_auth",
            "_content_type",
            "_headers",
        ]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method screenshotweb"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("url") is not None:  # noqa: E501
            _query_params.append(("url", _params["url"]))

        if _params.get("user_id") is not None:  # noqa: E501
            _query_params.append(("user_id", _params["user_id"]))

        if _params.get("safe") is not None:  # noqa: E501
            _query_params.append(("safe", _params["safe"]))

        if _params.get("until") is not None:  # noqa: E501
            _query_params.append(("until", _params["until"].value))

        if _params.get("nsfw_check") is not None:  # noqa: E501
            _query_params.append(("nsfw_check", _params["nsfw_check"]))

        if _params.get("full_page") is not None:  # noqa: E501
            _query_params.append(("full_page", _params["full_page"]))

        if _params.get("image_type") is not None:  # noqa: E501
            _query_params.append(("image_type", _params["image_type"]))

        if _params.get("imgerr") is not None:  # noqa: E501
            _query_params.append(("imgerr", _params["imgerr"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "object", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/web/screenshot",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def streamaudio(self, url: Any, **kwargs) -> object:  # noqa: E501
        ...

    @overload
    def streamaudio(self, url: Any, async_req: Optional[bool] = True, **kwargs) -> object:  # noqa: E501
        ...

    @validate_arguments
    def streamaudio(self, url: Any, async_req: Optional[bool] = None, **kwargs) -> Union[object, Awaitable[object]]:  # noqa: E501
        """Stream Audio  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.streamaudio(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the streamaudio_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.streamaudio_with_http_info(url, **kwargs)  # noqa: E501

    @validate_arguments
    def streamaudio_with_http_info(self, url: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Stream Audio  # noqa: E501.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.streamaudio_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["url", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method streamaudio"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("url") is not None:  # noqa: E501
            _query_params.append(("url", _params["url"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "object", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/fragementStream",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

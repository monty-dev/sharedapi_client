# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
from typing import Any, Awaitable, Optional, Union, overload

from pydantic import Field, validate_arguments
from typing_extensions import Annotated

from sharedapi_client.api_client import ApiClient
from sharedapi_client.api_response import ApiResponse
from sharedapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from sharedapi_client.models.ai_image_generation_response import AIImageGenerationResponse
from sharedapi_client.models.image_evaluation_result import ImageEvaluationResult
from sharedapi_client.models.ocr_read_response import OCRReadResponse
from sharedapi_client.models.ocr_rquest import OCRRquest


class AiApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def createartwithdalle2(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @overload
    def createartwithdalle2(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @validate_arguments
    def createartwithdalle2(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[AIImageGenerationResponse, Awaitable[AIImageGenerationResponse]]:  # noqa: E501
        """Create Art With Dalle-2  # noqa: E501.

        Creative dalle-2 generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createartwithdalle2(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AIImageGenerationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the createartwithdalle2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.createartwithdalle2_with_http_info(idea, **kwargs)  # noqa: E501

    @validate_arguments
    def createartwithdalle2_with_http_info(self, idea: Annotated[Any, Field(..., description="AI generation prompt")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Art With Dalle-2  # noqa: E501.

        Creative dalle-2 generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createartwithdalle2_with_http_info(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AIImageGenerationResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["idea"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method createartwithdalle2" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("idea") is not None:  # noqa: E501
            _query_params.append(("idea", _params["idea"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "AIImageGenerationResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/dalle-2",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def createcyberpunkavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @overload
    def createcyberpunkavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @validate_arguments
    def createcyberpunkavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[AIImageGenerationResponse, Awaitable[AIImageGenerationResponse]]:  # noqa: E501
        """Create Cyberpunk Avatar  # noqa: E501.

        Create a Cyberpunk avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createcyberpunkavatar(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AIImageGenerationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the createcyberpunkavatar_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.createcyberpunkavatar_with_http_info(idea, **kwargs)  # noqa: E501

    @validate_arguments
    def createcyberpunkavatar_with_http_info(self, idea: Annotated[Any, Field(..., description="AI generation prompt")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Cyberpunk Avatar  # noqa: E501.

        Create a Cyberpunk avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createcyberpunkavatar_with_http_info(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AIImageGenerationResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["idea"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method createcyberpunkavatar" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("idea") is not None:  # noqa: E501
            _query_params.append(("idea", _params["idea"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "AIImageGenerationResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/cyberpunk",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def createfantasyartavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @overload
    def createfantasyartavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @validate_arguments
    def createfantasyartavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[AIImageGenerationResponse, Awaitable[AIImageGenerationResponse]]:  # noqa: E501
        """Create Fantasy Art Avatar  # noqa: E501.

        Creative image generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createfantasyartavatar(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AIImageGenerationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the createfantasyartavatar_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.createfantasyartavatar_with_http_info(idea, **kwargs)  # noqa: E501

    @validate_arguments
    def createfantasyartavatar_with_http_info(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create Fantasy Art Avatar  # noqa: E501.

        Creative image generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createfantasyartavatar_with_http_info(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AIImageGenerationResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["idea"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method createfantasyartavatar" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("idea") is not None:  # noqa: E501
            _query_params.append(("idea", _params["idea"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "AIImageGenerationResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/creative",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def createpixelavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @overload
    def createpixelavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> AIImageGenerationResponse:  # noqa: E501
        ...

    @validate_arguments
    def createpixelavatar(
        self,
        idea: Annotated[Any, Field(..., description="AI generation prompt")],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[AIImageGenerationResponse, Awaitable[AIImageGenerationResponse]]:  # noqa: E501
        """Create Pixel Avatar  # noqa: E501.

        Create a colorful pixel art totally avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createpixelavatar(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AIImageGenerationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the createpixelavatar_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.createpixelavatar_with_http_info(idea, **kwargs)  # noqa: E501

    @validate_arguments
    def createpixelavatar_with_http_info(self, idea: Annotated[Any, Field(..., description="AI generation prompt")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Pixel Avatar  # noqa: E501.

        Create a colorful pixel art totally avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createpixelavatar_with_http_info(idea, async_req=True)
        >>> result = thread.get()

        :param idea: AI generation prompt (required)
        :type idea: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AIImageGenerationResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["idea"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method createpixelavatar" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("idea") is not None:  # noqa: E501
            _query_params.append(("idea", _params["idea"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "AIImageGenerationResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/avatar",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def evaluate_image_safety(self, url: Any, **kwargs) -> ImageEvaluationResult:  # noqa: E501
        ...

    @overload
    def evaluate_image_safety(self, url: Any, async_req: Optional[bool] = True, **kwargs) -> ImageEvaluationResult:  # noqa: E501
        ...

    @validate_arguments
    def evaluate_image_safety(
        self,
        url: Any,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[ImageEvaluationResult, Awaitable[ImageEvaluationResult]]:  # noqa: E501
        """Evaluate Image Safety  # noqa: E501.

        Returns probabilities of the image containing racy or adult content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluate_image_safety(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageEvaluationResult
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the evaluate_image_safety_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.evaluate_image_safety_with_http_info(url, **kwargs)  # noqa: E501

    @validate_arguments
    def evaluate_image_safety_with_http_info(self, url: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Evaluate Image Safety  # noqa: E501.

        Returns probabilities of the image containing racy or adult content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluate_image_safety_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageEvaluationResult, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["url"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method evaluate_image_safety" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("url") is not None:  # noqa: E501
            _query_params.append(("url", _params["url"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "ImageEvaluationResult", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/nsfw_check",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def read_textfrom_image(self, ocr_rquest: OCRRquest, **kwargs) -> OCRReadResponse:  # noqa: E501
        ...

    @overload
    def read_textfrom_image(self, ocr_rquest: OCRRquest, async_req: Optional[bool] = True, **kwargs) -> OCRReadResponse:  # noqa: E501
        ...

    @validate_arguments
    def read_textfrom_image(
        self,
        ocr_rquest: OCRRquest,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[OCRReadResponse, Awaitable[OCRReadResponse]]:  # noqa: E501
        """Read Text From Image  # noqa: E501.

        Perform OCR on a text image. Responses may take up to 10 seconds to return!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_textfrom_image(ocr_rquest, async_req=True)
        >>> result = thread.get()

        :param ocr_rquest: (required)
        :type ocr_rquest: OCRRquest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OCRReadResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the read_textfrom_image_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.read_textfrom_image_with_http_info(ocr_rquest, **kwargs)  # noqa: E501

    @validate_arguments
    def read_textfrom_image_with_http_info(self, ocr_rquest: OCRRquest, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Text From Image  # noqa: E501.

        Perform OCR on a text image. Responses may take up to 10 seconds to return!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_textfrom_image_with_http_info(ocr_rquest, async_req=True)
        >>> result = thread.get()

        :param ocr_rquest: (required)
        :type ocr_rquest: OCRRquest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OCRReadResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["ocr_rquest"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method read_textfrom_image" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["ocr_rquest"] is not None:
            _body_params = _params["ocr_rquest"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get("_content_type", self.api_client.select_header_content_type(["application/json"]))
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "OCRReadResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/ai/ocr",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def removebackgroundsfromimage(self, url: Any, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def removebackgroundsfromimage(self, url: Any, async_req: Optional[bool] = True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def removebackgroundsfromimage(self, url: Any, async_req: Optional[bool] = None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """Remove Backgrounds From Image  # noqa: E501.

        Performs AI based image segmentation that is more powerful than traditional rembg tooling.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.removebackgroundsfromimage(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the removebackgroundsfromimage_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.removebackgroundsfromimage_with_http_info(url, **kwargs)  # noqa: E501

    @validate_arguments
    def removebackgroundsfromimage_with_http_info(self, url: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Backgrounds From Image  # noqa: E501.

        Performs AI based image segmentation that is more powerful than traditional rembg tooling.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.removebackgroundsfromimage_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param url: (required)
        :type url: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        _params = locals()

        _all_params = ["url"]
        _all_params.extend(["async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"])

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method removebackgroundsfromimage" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("url") is not None:  # noqa: E501
            _query_params.append(("url", _params["url"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["image/png", "application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/ai/segment_bg",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

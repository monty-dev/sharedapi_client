# coding: utf-8

"""Melanie Data API.

A high performance & centrally cached API service for premium bots.

The version of the OpenAPI document:  commit 5b04d15 url_mime @ Aug 30 1:59 pm
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
from typing import Any, Awaitable, Optional, Union, overload

from pydantic import validate_arguments

from sharedapi_client.api_client import ApiClient
from sharedapi_client.api_response import ApiResponse
from sharedapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from sharedapi_client.models.tik_tok_user_profile_response import TikTokUserProfileResponse
from sharedapi_client.models.tik_tok_video_response import TikTokVideoResponse
from sharedapi_client.models.tiktok_post_request import TiktokPostRequest
from sharedapi_client.models.tiktok_top_user_video_results import TiktokTopUserVideoResults


class TiktokApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def download_tik_tok_post(self, tiktok_post_request: TiktokPostRequest, user_id: Optional[Any] = None, **kwargs) -> TikTokVideoResponse:  # noqa: E501
        ...

    @overload
    def download_tik_tok_post(
        self,
        tiktok_post_request: TiktokPostRequest,
        user_id: Optional[Any] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> TikTokVideoResponse:  # noqa: E501
        ...

    @validate_arguments
    def download_tik_tok_post(
        self,
        tiktok_post_request: TiktokPostRequest,
        user_id: Optional[Any] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[TikTokVideoResponse, Awaitable[TikTokVideoResponse]]:  # noqa: E501
        """Download Tiktok Post  # noqa: E501.

        Download a TikTok post and its associated metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_tik_tok_post(tiktok_post_request, user_id, async_req=True)
        >>> result = thread.get()

        :param tiktok_post_request: (required)
        :type tiktok_post_request: TiktokPostRequest
        :param user_id:
        :type user_id: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TikTokVideoResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the download_tik_tok_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.download_tik_tok_post_with_http_info(tiktok_post_request, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def download_tik_tok_post_with_http_info(
        self,
        tiktok_post_request: TiktokPostRequest,
        user_id: Optional[Any] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Download Tiktok Post  # noqa: E501.

        Download a TikTok post and its associated metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_tik_tok_post_with_http_info(tiktok_post_request, user_id, async_req=True)
        >>> result = thread.get()

        :param tiktok_post_request: (required)
        :type tiktok_post_request: TiktokPostRequest
        :param user_id:
        :type user_id: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TikTokVideoResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = [
            "tiktok_post_request",
            "user_id",
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_auth",
            "_content_type",
            "_headers",
        ]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method download_tik_tok_post"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("user_id") is not None:  # noqa: E501
            _query_params.append(("user_id", _params["user_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["tiktok_post_request"] is not None:
            _body_params = _params["tiktok_post_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        if _content_types_list := _params.get("_content_type", self.api_client.select_header_content_type(["application/json"])):
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "TikTokVideoResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/tiktok/post",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def fetch_user_top_tik_toks(self, username: Any, limit: Optional[Any] = None, **kwargs) -> TiktokTopUserVideoResults:  # noqa: E501
        ...

    @overload
    def fetch_user_top_tik_toks(
        self,
        username: Any,
        limit: Optional[Any] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> TiktokTopUserVideoResults:  # noqa: E501
        ...

    @validate_arguments
    def fetch_user_top_tik_toks(
        self,
        username: Any,
        limit: Optional[Any] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[TiktokTopUserVideoResults, Awaitable[TiktokTopUserVideoResults]]:  # noqa: E501
        """Fetch User Top Tiktoks  # noqa: E501.

        Fetch all TikToks posted by the user and sort them by play count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_user_top_tik_toks(username, limit, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param limit:
        :type limit: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TiktokTopUserVideoResults
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the fetch_user_top_tik_toks_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.fetch_user_top_tik_toks_with_http_info(username, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_user_top_tik_toks_with_http_info(self, username: Any, limit: Optional[Any] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch User Top Tiktoks  # noqa: E501.

        Fetch all TikToks posted by the user and sort them by play count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_user_top_tik_toks_with_http_info(username, limit, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param limit:
        :type limit: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TiktokTopUserVideoResults, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = [
            "username",
            "limit",
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_auth",
            "_content_type",
            "_headers",
        ]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method fetch_user_top_tik_toks"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "TiktokTopUserVideoResults", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/tiktok/{username}/top",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def get_tik_tok_user(self, username: Any, **kwargs) -> TikTokUserProfileResponse:  # noqa: E501
        ...

    @overload
    def get_tik_tok_user(self, username: Any, async_req: Optional[bool] = True, **kwargs) -> TikTokUserProfileResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_tik_tok_user(
        self,
        username: Any,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[TikTokUserProfileResponse, Awaitable[TikTokUserProfileResponse]]:  # noqa: E501
        """Get Tiktok User  # noqa: E501.

        Receive full metadata of a user's TikTok profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tik_tok_user(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TikTokUserProfileResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_tik_tok_user_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.get_tik_tok_user_with_http_info(username, **kwargs)  # noqa: E501

    @validate_arguments
    def get_tik_tok_user_with_http_info(self, username: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Tiktok User  # noqa: E501.

        Receive full metadata of a user's TikTok profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tik_tok_user_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TikTokUserProfileResponse, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["username", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method get_tik_tok_user"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "TikTokUserProfileResponse", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/tiktok/{username}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

    @overload
    async def getrecentuser_tik_toks(self, username: Any, **kwargs) -> TiktokTopUserVideoResults:  # noqa: E501
        ...

    @overload
    def getrecentuser_tik_toks(self, username: Any, async_req: Optional[bool] = True, **kwargs) -> TiktokTopUserVideoResults:  # noqa: E501
        ...

    @validate_arguments
    def getrecentuser_tik_toks(
        self,
        username: Any,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[TiktokTopUserVideoResults, Awaitable[TiktokTopUserVideoResults]]:  # noqa: E501
        """Get Recent User Tiktoks  # noqa: E501.

        Fetch the inital (most recent) TikToks posted by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.getrecentuser_tik_toks(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TiktokTopUserVideoResults
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the getrecentuser_tik_toks_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.getrecentuser_tik_toks_with_http_info(username, **kwargs)  # noqa: E501

    @validate_arguments
    def getrecentuser_tik_toks_with_http_info(self, username: Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Recent User Tiktoks  # noqa: E501.

        Fetch the inital (most recent) TikToks posted by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.getrecentuser_tik_toks_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TiktokTopUserVideoResults, status_code(int), headers(HTTPHeaderDict))
        """
        _params = locals()

        _all_params = ["username", "async_req", "_return_http_data_only", "_preload_content", "_request_timeout", "_request_auth", "_content_type", "_headers"]
        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                msg = f"Got an unexpected keyword argument '{_key}' to method getrecentuser_tik_toks"
                raise ApiTypeError(msg)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["username"]:
            _path_params["username"] = _params["username"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {"200": "TiktokTopUserVideoResults", "422": "HTTPValidationError"}

        return self.api_client.call_api(
            "/api/tiktok/{username}/recent",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )  # noqa: E501

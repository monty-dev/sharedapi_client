# coding: utf-8

"""
    Melanie Data API 

    A high performance & centrally cached API service for premium bots. 

    The version of the OpenAPI document:  commit e9b768a rl @ Sep 3 3:07 pm
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import Field

from typing import Any, Optional

from sharedapi_client.models.instagram_highlight_index_response import InstagramHighlightIndexResponse
from sharedapi_client.models.instagram_highlight_response import InstagramHighlightResponse
from sharedapi_client.models.instagram_post_request import InstagramPostRequest
from sharedapi_client.models.instagram_post_response import InstagramPostResponse
from sharedapi_client.models.instagram_profile_model_response import InstagramProfileModelResponse
from sharedapi_client.models.instagram_story_response import InstagramStoryResponse

from sharedapi_client.api_client import ApiClient
from sharedapi_client.api_response import ApiResponse
from sharedapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InstagramApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def download_instagram_post(self, instagram_post_request : InstagramPostRequest, **kwargs) -> InstagramPostResponse:  # noqa: E501
        ...

    @overload
    def download_instagram_post(self, instagram_post_request : InstagramPostRequest, async_req: Optional[bool]=True, **kwargs) -> InstagramPostResponse:  # noqa: E501
        ...

    @validate_arguments
    def download_instagram_post(self, instagram_post_request : InstagramPostRequest, async_req: Optional[bool]=None, **kwargs) -> Union[InstagramPostResponse, Awaitable[InstagramPostResponse]]:  # noqa: E501
        """Download Instagram Post  # noqa: E501

        Fetch an Instagram post, story, reel or other media type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_instagram_post(instagram_post_request, async_req=True)
        >>> result = thread.get()

        :param instagram_post_request: (required)
        :type instagram_post_request: InstagramPostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstagramPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_instagram_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.download_instagram_post_with_http_info(instagram_post_request, **kwargs)  # noqa: E501

    @validate_arguments
    def download_instagram_post_with_http_info(self, instagram_post_request : InstagramPostRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Instagram Post  # noqa: E501

        Fetch an Instagram post, story, reel or other media type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_instagram_post_with_http_info(instagram_post_request, async_req=True)
        >>> result = thread.get()

        :param instagram_post_request: (required)
        :type instagram_post_request: InstagramPostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstagramPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'instagram_post_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_instagram_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['instagram_post_request'] is not None:
            _body_params = _params['instagram_post_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InstagramPostResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/instagram/post', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def fetch_stories(self, username : Any, force : Annotated[Optional[Any], Field(description="Bypass cache and fetch the latest user stories")] = None, **kwargs) -> InstagramStoryResponse:  # noqa: E501
        ...

    @overload
    def fetch_stories(self, username : Any, force : Annotated[Optional[Any], Field(description="Bypass cache and fetch the latest user stories")] = None, async_req: Optional[bool]=True, **kwargs) -> InstagramStoryResponse:  # noqa: E501
        ...

    @validate_arguments
    def fetch_stories(self, username : Any, force : Annotated[Optional[Any], Field(description="Bypass cache and fetch the latest user stories")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[InstagramStoryResponse, Awaitable[InstagramStoryResponse]]:  # noqa: E501
        """Fetch Stories  # noqa: E501

        Fetch a users current Instagram story. Does not mark a view on the instagram user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_stories(username, force, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param force: Bypass cache and fetch the latest user stories
        :type force: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstagramStoryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the fetch_stories_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.fetch_stories_with_http_info(username, force, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_stories_with_http_info(self, username : Any, force : Annotated[Optional[Any], Field(description="Bypass cache and fetch the latest user stories")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch Stories  # noqa: E501

        Fetch a users current Instagram story. Does not mark a view on the instagram user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_stories_with_http_info(username, force, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param force: Bypass cache and fetch the latest user stories
        :type force: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstagramStoryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username',
            'force'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_stories" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['username']:
            _path_params['username'] = _params['username']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InstagramStoryResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/instagram/story/{username}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_highlightby_id(self, highlight_id : Any, force : Optional[Any] = None, **kwargs) -> InstagramHighlightResponse:  # noqa: E501
        ...

    @overload
    def get_highlightby_id(self, highlight_id : Any, force : Optional[Any] = None, async_req: Optional[bool]=True, **kwargs) -> InstagramHighlightResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_highlightby_id(self, highlight_id : Any, force : Optional[Any] = None, async_req: Optional[bool]=None, **kwargs) -> Union[InstagramHighlightResponse, Awaitable[InstagramHighlightResponse]]:  # noqa: E501
        """Get Highlight By Id  # noqa: E501

        Load the media of a highlight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_highlightby_id(highlight_id, force, async_req=True)
        >>> result = thread.get()

        :param highlight_id: (required)
        :type highlight_id: object
        :param force:
        :type force: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstagramHighlightResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_highlightby_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_highlightby_id_with_http_info(highlight_id, force, **kwargs)  # noqa: E501

    @validate_arguments
    def get_highlightby_id_with_http_info(self, highlight_id : Any, force : Optional[Any] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Highlight By Id  # noqa: E501

        Load the media of a highlight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_highlightby_id_with_http_info(highlight_id, force, async_req=True)
        >>> result = thread.get()

        :param highlight_id: (required)
        :type highlight_id: object
        :param force:
        :type force: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstagramHighlightResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'highlight_id',
            'force'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_highlightby_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['highlight_id']:
            _path_params['highlight_id'] = _params['highlight_id']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InstagramHighlightResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/instagram/highlight/{highlight_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_highlights(self, username : Any, **kwargs) -> InstagramHighlightIndexResponse:  # noqa: E501
        ...

    @overload
    def get_highlights(self, username : Any, async_req: Optional[bool]=True, **kwargs) -> InstagramHighlightIndexResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_highlights(self, username : Any, async_req: Optional[bool]=None, **kwargs) -> Union[InstagramHighlightIndexResponse, Awaitable[InstagramHighlightIndexResponse]]:  # noqa: E501
        """Get Highlights  # noqa: E501

        Fetch a users Instagram highlights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_highlights(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstagramHighlightIndexResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_highlights_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_highlights_with_http_info(username, **kwargs)  # noqa: E501

    @validate_arguments
    def get_highlights_with_http_info(self, username : Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Highlights  # noqa: E501

        Fetch a users Instagram highlights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_highlights_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstagramHighlightIndexResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_highlights" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['username']:
            _path_params['username'] = _params['username']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InstagramHighlightIndexResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/instagram/highlights/{username}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_instagram_user(self, username : Any, force : Annotated[Optional[Any], Field(description="Force refresh or use cached result")] = None, preload_posts : Annotated[Optional[Any], Field(description="Whether posts should be preemptively loaded into cache on user fetch")] = None, **kwargs) -> InstagramProfileModelResponse:  # noqa: E501
        ...

    @overload
    def get_instagram_user(self, username : Any, force : Annotated[Optional[Any], Field(description="Force refresh or use cached result")] = None, preload_posts : Annotated[Optional[Any], Field(description="Whether posts should be preemptively loaded into cache on user fetch")] = None, async_req: Optional[bool]=True, **kwargs) -> InstagramProfileModelResponse:  # noqa: E501
        ...

    @validate_arguments
    def get_instagram_user(self, username : Any, force : Annotated[Optional[Any], Field(description="Force refresh or use cached result")] = None, preload_posts : Annotated[Optional[Any], Field(description="Whether posts should be preemptively loaded into cache on user fetch")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[InstagramProfileModelResponse, Awaitable[InstagramProfileModelResponse]]:  # noqa: E501
        """Get Instagram User  # noqa: E501

        Fetch an Instagram user's profile with full metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_instagram_user(username, force, preload_posts, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param force: Force refresh or use cached result
        :type force: object
        :param preload_posts: Whether posts should be preemptively loaded into cache on user fetch
        :type preload_posts: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstagramProfileModelResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_instagram_user_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_instagram_user_with_http_info(username, force, preload_posts, **kwargs)  # noqa: E501

    @validate_arguments
    def get_instagram_user_with_http_info(self, username : Any, force : Annotated[Optional[Any], Field(description="Force refresh or use cached result")] = None, preload_posts : Annotated[Optional[Any], Field(description="Whether posts should be preemptively loaded into cache on user fetch")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Instagram User  # noqa: E501

        Fetch an Instagram user's profile with full metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_instagram_user_with_http_info(username, force, preload_posts, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: object
        :param force: Force refresh or use cached result
        :type force: object
        :param preload_posts: Whether posts should be preemptively loaded into cache on user fetch
        :type preload_posts: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstagramProfileModelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username',
            'force',
            'preload_posts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instagram_user" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['username']:
            _path_params['username'] = _params['username']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        if _params.get('preload_posts') is not None:  # noqa: E501
            _query_params.append(('preload_posts', _params['preload_posts']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InstagramProfileModelResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/instagram/{username}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
